# Function to install missing Packages
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package, '--user'])
# Trying to import all Pkgs required and install them if are not present in the local env
try:
    # Libraries Needed by the script
    import PySimpleGUI as sg
    import subprocess
    import os
    import re
    import pandas as pd
    import openpyxl as xl
    from openpyxl import Workbook
    from openpyxl import load_workbook
    from openpyxl.styles import Alignment
    from openpyxl.styles import Color, PatternFill, Font
    from openpyxl.styles.borders import Border, Side
    from copy import copy
    import shutil
    import win32com.client as win32
    import warnings
    warnings.filterwarnings('ignore')
    import sys
    import numpy as np
    from fuzzywuzzy import fuzz
    import difflib
    import xlrd
except:
    # Creating a list of required packages
    import requests
    r = requests.get('https://raw.githubusercontent.com/JAUCB/reqs/main/requirements.txt')
    data=r.text
    pkgs_req = data.split("\n")# creating a list removing last empty string generated by last \n
    if '' in pkgs_req:
        pkgs_req.pop()
    import pkg_resources
    temp = [p for p in pkg_resources.working_set]# list with pkgs and path in the local env
    pkgs_installed=[]
    [pkgs_installed.append(str(p)) for p in temp]# Removing path 
    pkgs_installed=[s.replace(' ','==') for s in pkgs_installed]# #Replace empy space with '==' to match our check list
    import subprocess
    import sys
    for p in pkgs_req:
        if p in pkgs_installed:
            print(f"{p} already installed")
        elif p not in pkgs_installed:
            print(f"{p} is not installed in your env please wait for the installation")
            install(p)
    # Reimporting all libraries 
    import PySimpleGUI as sg
    import subprocess
    import os
    import re
    import pandas as pd
    import openpyxl as xl
    from openpyxl import Workbook
    from openpyxl import load_workbook
    from openpyxl.styles import Alignment
    from openpyxl.styles import Color, PatternFill, Font
    from openpyxl.styles.borders import Border, Side
    from copy import copy
    import shutil
    import win32com.client as win32
    import warnings
    warnings.filterwarnings('ignore')
    import sys
    import numpy as np
    from fuzzywuzzy import fuzz
    import difflib
    import xlrd


# Set up the layout of the main window, with buttons to be linked with the 3 main Tools.
layout = [[sg.Text('Which Program do you want to use?', key='-TEXT-')],
          [sg.Button('UCB vs PXL'), sg.Button('OLD vs NEW'),sg.Button('BIBO Fmtg') ],
          # In this line you can describe all the modification from one ver to another
          [sg.Text('###\n XLRD BUG RELATED ERROR SOLVED \n- The application has been updated to Ver 1.0.9\n\n###', key='-TEXTVER-')],
          ]
# Here you have to remeber to update the number of the ver before making the Push
mainwindow = sg.Window('RBM Internal Tools Ver 1.0.9', layout)
print()
#start of the Loop that contains the Application
while True:
    try:
        event, values = mainwindow.read()
        if event == sg.WIN_CLOSED:
            break
        if event == 'UCB vs PXL':
            # List of supperted extension that are checked before poceeed with the excution of this tool
            supportedextensions = ['xlsx', 'xlsm']
            # Layout of UCB vs PXL Tools window
            layoutprefile = [
                [sg.Text('Select two files to proceed')],
                [sg.Text('File UCB'), sg.InputText(), sg.FileBrowse()],
                [sg.Text('File PXL'), sg.InputText(), sg.FileBrowse()],
                [sg.Text('Saving Location'), sg.InputText(),
                 sg.FileSaveAs()],
                [sg.Output(size=(61, 5))],
                [sg.Submit('Proceed'), sg.Cancel('Exit')]
            ]
            window = sg.Window('UCB vs PXL', layoutprefile)
            while True:    # The Event Loop
                event, values = window.read()
                if event in (None, 'Exit', 'Cancel',sg.WIN_CLOSED): # Option to close the current loop
                    secondwindow = 0  # Condition defoulted to 0 that is applied to pass tp next window
                    window.close()
                    break
                elif event == 'Proceed':
                    #do some checks if valid directories have been provided
                    file1test = file2test = isitago = proceedwithfindcommonkeys = None
                    file1, file2, out1 = values[0], values[1],values[2]
                    if file1 and file2 and out1:
                        file1test = re.findall('.+:\/.+\.+.', file1)
                        file2test = re.findall('.+:\/.+\.+.', file2)
                        out1test= re.findall('.+:\/.+\.+.', out1)
                        isitago = 1
                        if not file1test and file1test is not None:
                            print('Error: File UCB path not valid.')
                            isitago = 0
                        elif not file2test and file2test is not None:
                            print('Error: File PXL path not valid.')
                            isitago = 0
                        elif not out1test and out1test is not None:
                            print('Error: Output PATH not valid')
                            isitago = 0
                        #both files to have the same extension
                        #they need to be in a list of supported extensions
                        elif re.findall('/.+?/.+\.(.+)',file1)[0] not in supportedextensions or re.findall('/.+?/.+\.(.+)',file2)[0] not in supportedextensions:
                            print('Error: File format currently not supported. At the moment only xlsx and xlsm files are supported.')
                            isitago = 0
                        elif file1 == file2:
                            print('Error: The files need to be different')
                            isitago = 0
                        elif isitago == 1:
                            print('Info: Filepaths correctly defined.')
                            # check if files exist
                            try:
                                print('Info: Attempting to access files.')
                                if re.findall('/.+?/.+\.(.+)',file1)[0] == 'csv':
                                    df1, df2 = pd.read_csv(file1), pd.read_csv(file2)
                                elif re.findall('/.+?/.+\.(.+)',file1)[0] == 'json':
                                    df1, df2 = pd.read_json(file1), pd.read_json(file2)
                                elif re.findall('/.+?/.+\.(.+)',file1)[0] in  ['xlsx', 'xlsm']:
                                    df1, df2 = list(pd.read_excel(file1,None,engine='openpyxl').keys()), list(pd.read_excel(file2,None,engine='openpyxl').keys())

                                else:
                                    print('How did we get here?')
                                proceedwithfindcommonkeys = 1
                            except IOError:
                                print("Error: File not accessible.")
                                proceedwithfindcommonkeys = 0
                            except UnicodeDecodeError:
                                print("Error: File includes a unicode character that cannot be decoded with the default UTF decryption.")
                                proceedwithfindcommonkeys = 0
                            except Exception as e:
                                print('Error: ', e)
                                proceedwithfindcommonkeys = 0
                    else:
                        print('Error: Please choose Input Files and Output Saving Location.')
                    if proceedwithfindcommonkeys == 1:
                        keyslist_ucb = df1 #This will be the list of tabs from ucb file
                        keyslist_pxl = df2 #This will be the list of tabs from pxl file
                        keyslist=[]
                        formlists_ucb=[]
                        formlists_pxl=[]
                        if len(keyslist_ucb) == 0:
                            print('Error: UCB file seems empty.')
                            secondwindow = 0
                        elif len(keyslist_ucb) == 0:
                            print('Error: UPXL file seems empty.')
                            secondwindow = 0
                        else:
                            for item in keyslist_ucb:
                                keyslist.append(item)
                            for item in keyslist_pxl:
                                keyslist.append(item)  
                            secondwindow = 1
            #################################################
            # First screen completed, moving on to second one
                        if secondwindow != 1:
                            exit()
                        #To align the three columns on the UI, we need the max len
                        #Note: This could be made better by having the max len of each column
                        maxlen_ucb = 0
                        for header in keyslist_ucb:
                            if len(str(header)) > maxlen_ucb:
                                maxlen_ucb = len(str(header))
                        if maxlen_ucb > 25:
                            maxlen_ucb = 25
                        elif maxlen_ucb < 10:
                            maxlen_ucb = 15
                        #we need to split the keys to four columns
                        for index,item in enumerate(keyslist_ucb):
                            if index == 0: i =0
                            if len(keyslist_ucb) >= 4 and i == 0:
                                formlists_ucb.append([sg.Checkbox(keyslist_ucb[i], size=(maxlen_ucb,None)),
                                                      sg.Checkbox(keyslist_ucb[i+1], size=(maxlen_ucb,None)),
                                                      sg.Checkbox(keyslist_ucb[i+2], size=(maxlen_ucb,None)),
                                                      sg.Checkbox(keyslist_ucb[i+3], size=(maxlen_ucb,None))])
                                i += 4
                            elif len(keyslist_ucb) > i:
                                if len(keyslist_ucb) - i - 4>= 0:
                                    formlists_ucb.append([sg.Checkbox(keyslist_ucb[i],size=(maxlen_ucb,None)),
                                                          sg.Checkbox(keyslist_ucb[i+1], size=(maxlen_ucb,None)),
                                                          sg.Checkbox(keyslist_ucb[i+2], size=(maxlen_ucb,None)),
                                                          sg.Checkbox(keyslist_ucb[i+3], size=(maxlen_ucb,None))])
                                    i += 4
                                elif len(keyslist_ucb) - i - 3>= 0:
                                    formlists_ucb.append([sg.Checkbox(keyslist_ucb[i],size=(maxlen_ucb,None)),
                                                      sg.Checkbox(keyslist_ucb[i+1], size=(maxlen_ucb,None)),
                                                      sg.Checkbox(keyslist_ucb[i+2], size=(maxlen_ucb,None))])
                                    i += 3
                                elif len(keyslist_ucb)- i - 2>= 0:
                                    formlists_ucb.append([sg.Checkbox(keyslist_ucb[i],size=(maxlen_ucb,None)),
                                                      sg.Checkbox(keyslist_ucb[i+1], size=(maxlen_ucb,None))])
                                    i += 2
                                elif len(keyslist_ucb) - i - 1>= 0:
                                    formlists_ucb.append([sg.Checkbox(keyslist_ucb[i], size=(maxlen_ucb,None))])
                                    i += 1
                                else:
                                    sg.Popup('Error: Uh-oh, something\'s gone wrong!')

                        maxlen_pxl = 0
                        for header in keyslist_pxl:
                            if len(str(header)) > maxlen_pxl:
                                maxlen_pxl = len(str(header))
                        if maxlen_pxl > 25:
                            maxlen_pxl = 25
                        elif maxlen_pxl < 10:
                            maxlen_pxl = 15

                        for index,item in enumerate(keyslist_pxl):
                            if index == 0: i =0
                            if len(keyslist_pxl) >= 4 and i == 0:
                                formlists_pxl.append([sg.Checkbox(keyslist_pxl[i], size=(maxlen_pxl,None)),
                                                      sg.Checkbox(keyslist_pxl[i+1], size=(maxlen_pxl,None)),
                                                      sg.Checkbox(keyslist_pxl[i+2], size=(maxlen_pxl,None)),
                                                      sg.Checkbox(keyslist_pxl[i+3], size=(maxlen_pxl,None))])
                                i += 4
                            elif len(keyslist_pxl) > i:
                                if len(keyslist_pxl) - i - 4>= 0:
                                    formlists_pxl.append([sg.Checkbox(keyslist_pxl[i], size=(maxlen_pxl,None)),
                                                          sg.Checkbox(keyslist_pxl[i+1], size=(maxlen_pxl,None)),
                                                          sg.Checkbox(keyslist_pxl[i+2], size=(maxlen_pxl,None)),
                                                          sg.Checkbox(keyslist_pxl[i+3], size=(maxlen_pxl,None))])
                                    i += 4
                                elif len(keyslist_pxl) - i - 3>= 0:
                                    formlists_pxl.append([sg.Checkbox(keyslist_pxl[i], size=(maxlen_pxl,None)),
                                                          sg.Checkbox(keyslist_pxl[i+1], size=(maxlen_pxl,None)),
                                                          sg.Checkbox(keyslist_pxl[i+2], size=(maxlen_pxl,None))])
                                    i += 3
                                elif len(keyslist_pxl)- i - 2>= 0:
                                    formlists_pxl.append([sg.Checkbox(keyslist_pxl[i],size=(maxlen_pxl,None)),
                                                          sg.Checkbox(keyslist_pxl[i+1], size=(maxlen_pxl,None))])
                                    i += 2
                                elif len(keyslist_pxl) - i - 1>= 0:
                                    formlists_pxl.append([sg.Checkbox(keyslist_pxl[i], size=(maxlen_pxl,None))])
                                    i += 1
                                else:
                                    sg.Popup('Error: Uh-oh, something\'s gone wrong!')

                        #The second UI
                        layoutpostfile = [
                            [sg.Text('File UCB'), sg.InputText(os.path.basename(file1),disabled = True, size = (75,2))],
                            [sg.Text('File PXL'), sg.InputText(os.path.basename(file2),disabled = True, size = (75,2))],
                            [sg.Frame(layout=[
                                *formlists_ucb],title = 'Select one Tab from UCB file',relief=sg.RELIEF_RIDGE
                            )],
                            [sg.Frame(layout=[
                                *formlists_pxl],title = 'Select one Tab from PXL file',relief=sg.RELIEF_RIDGE
                            )],
                            [sg.Text('Make sure ABOVE parameters are correct')],
                            [sg.Text("PRESS ' COMPARE ' TO RUN THE PROGRAM")],
                            [sg.Output(size=(maxlen_pxl*6, 20))],
                            [sg.Submit('Compare'), sg.Cancel('Exit')]
                        ]
                        window2 = sg.Window('UCB vs PXL', layoutpostfile)
                        tab_ucb = []
                        tab_pxl=[]
                        t_l=[]
                        all_i=[]
                        allok_ucb= 0
                        allok_pxl=0
                        while True:  # The Event Loop that applies the actual comparison script
                            event, values = window2.read()
                            if event in (None, 'Exit', 'Cancel'):
                                window2.close()
                                break
                            elif event == 'Compare':
                                tab_ucb.clear()
                                tab_pxl.clear()
                                t_l.clear()
                                all_i.clear()
                                for index, value in enumerate(values):
                                    if index not in [0,1]:
                                        all_i.append(values[index])
                                        if values[index] == True:
                                            t_l.append(index)
                                allok_ucb=1
                                allok_pxl=1
                                # Here we force the User to select the right spreadsheet from both file (this is done in order to prevent spelling error in the name of the tab or order
                                if not any(all_i):
                                    print('Error: You did not select any tab, please select ONE for UCB and ONE for PXL')
                                    allok_ucb=0
                                    allok_pxl=0
                                elif sum(all_i) == 1:
                                    print('Error: Please select ONE tab for UCB and ONE for PXL')
                                    allok_ucb=0
                                    allok_pxl=0
                                elif sum(all_i) == 2:
                                    if "mitigation" in keyslist_ucb[t_l[0]-2].strip().lower():
                                        tab_ucb.append(keyslist_ucb[t_l[0]-2])
                                    elif "mitigation" not in keyslist_ucb[t_l[0]-2].strip().lower():
                                        print("Error: It seems you did not choose the 'Mitigations' tab in UCB, please select the 'Mitigations' box in the UCB section")
                                        allok_ucb=0
                                        allok_pxl=0
                                    if "risk management plan" in keyslist_pxl[t_l[1]-(len(keyslist_ucb)+2)].strip().lower():
                                        tab_pxl.append(keyslist_pxl[t_l[1]-(len(keyslist_ucb)+2)])
                                    elif "risk management plan" not in keyslist_pxl[t_l[1]-(len(keyslist_ucb)+2)].strip().lower():
                                        print("Error: It seems you did not choose the 'Risk Management Plan' tab in PXL, please select the 'Risk Management Plan ' box in the UCB section")
                                        allok_ucb=0
                                        allok_pxl=0
                                elif sum(all_i) > 2:
                                    print('Error: You selected more than one tab in UCB section or PXL section')
                                    allok_ucb=0
                                    allok_pxl=0
                                    # The Comparison starts
                                if allok_ucb==1 and allok_pxl==1:
                                    print('###########################################################################')
                                    print('Comparing the spreadsheets selected')
                                    print('Please wait')
                                    pxl=pd.read_excel(file2,
                                                      sheet_name=tab_pxl[0],engine='openpyxl').fillna("NA")
                                    ucb=pd.read_excel(file1,
                                                      sheet_name=tab_ucb[0],engine='openpyxl').fillna("NA")
                                    ucb_hd=1
                                    pxl_hd=1
                                    # Here possible Formatting problem are mitigated
                                    if 'PXL Risk #' != pxl.iloc[11,0]:
                                        print('#'*120)
                                        print("Error: 'Risk Management Plan' Tab of PXL file seems to have the headers for the comparison in a different row")
                                        print("Please check the headers are in line 13 in the excel file")
                                        print("Save the excel file and press 'COMPARE' again")
                                        pxl_hd=0
                                    else:
                                        pxl_hd=1   
                                    if 'Risk Category' != ucb.keys()[0]:
                                        print('#'*120)
                                        print("Error: 'Mitigations' Tab of UCB file seems to have the headers for the comparison in a different row")
                                        print("Please check the headers are in line 1 in the excel file")
                                        print("Save the excel file and press 'COMPARE' again")
                                        ucb_hd=0
                                    else:
                                        ucb_hd=1 
                                    # Column Name Formatting problem mitigation
                                    if ucb_hd==1 and pxl_hd==1:
                                                pxl=pxl.drop(pxl.index[0:11])
                                                pxl=pxl.reset_index(drop=True)
                                                pxl=pxl.rename(columns=pxl.iloc[0])
                                                pxl=pxl.drop(pxl.index[0])
                                                pxl=pxl.reset_index(drop=True)                                        
                                                print('Checking Dataset Headers')
                                                pxl_check_col=['PXL Risk #','UCB Risk #','PXL Mitg #','Risk Statement','Risk Owner','UCB Mitg #',  
                                                   'Mitigation Action(s)','Associated Document','Mitigation Action(s) Due Date for Completion']

                                                ucb_check_col=['Risk ID','Risk Description','Risk Status','Mitigation',
                                                               'Mitigation Document Plan','Mitigation Implemented Due Date',
                                                               'Mitigation ID','Mitigation_Status','Mitigation_Owner']
                                                for c in pxl_check_col:
                                                    if c not in [''.join(v.splitlines()).strip() for v in list(pxl.columns)]:
                                                        print('#'*120)
                                                        print()
                                                        print('ERROR: Column ||', c,"|| not found in PXL Headers !! CHECK THE PXL FILE, APPORT DUE CORRECTIONS,SAVE IT, PRESS 'COMPARE' !!")
                                                        print()
                                                        print("The most similar Header found is: ",difflib.get_close_matches(c, [''.join(v.splitlines()).strip() for v in list(pxl.columns)],n=1))
                                                        print()
                                                        print('PXL Headers: ',[''.join(v.splitlines()).strip() for v in list(pxl.columns)])
                                                        print()
                                                        ucb_hd=0
                                                        pxl_hd=0
                                                for c in ucb_check_col:
                                                    if c not in [''.join(v.splitlines()).strip() for v in list(ucb.columns)]:
                                                        print('#'*120)
                                                        print()
                                                        print('ERROR: Column ||',c,"|| not found in UCB Headers !! CHECK THE UCB FILE, APPORT DUE CORRECTIONS,SAVE IT, PRESS 'COMPARE' !!")
                                                        print()
                                                        print("The most similar Header found is: ",difflib.get_close_matches(c, [''.join(v.splitlines()).strip() for v in list(ucb.columns)],n=1))
                                                        print()
                                                        print('UCB Headers: ',[''.join(v.splitlines()).strip() for v in list(ucb.columns)])
                                                        print()
                                                        ucb_hd=0
                                                        pxl_hd=0
                                                if ucb_hd==1 and pxl_hd==1:
                                                    # when all requiremnts are satisfied  prceed with next steps
                                                    print('Dropping unnecessary columns')
                                                    pxl.columns=[''.join(v.splitlines()).strip() for v in list(pxl.columns)]
                                                    pxl.drop(pxl.columns.difference(pxl_check_col),1,inplace=True)
                                                    ucb.drop(ucb.columns.difference(ucb_check_col),1,inplace=True)                                      
                                                    
                                                    pxl['UCB Mitg #'] = pxl['UCB Mitg #'].apply(lambda x: str(x).split('_')[-1])
                                                    pxl['UCB Mitg #'] = pxl['UCB Mitg #'].apply(lambda x: int(x) if x.isdigit() else x )

                                                    pxl=pxl.set_index(['UCB Risk #','UCB Mitg #'])
                                                    ucb=ucb.set_index(['Risk ID','Mitigation ID'])

                                                    pxl['Mitigation Action(s) Due Date for Completion']=pxl['Mitigation Action(s) Due Date for Completion'].astype(str)

                                                    allidx_df =pd.concat([pxl,ucb]).sort_index()
                                                    print('Renaming columns for better pairing')

                                                    col_order=['PXL Risk #',
                                                               'PXL Mitg #',
                                                               'Risk Status',
                                                               'Mitigation_Status',
                                                               'Risk Description','Risk Statement',
                                                               'Mitigation','Mitigation Action(s)',
                                                               'Mitigation_Owner','Risk Owner',
                                                               'Mitigation Document Plan','Associated Document',
                                                               'Mitigation Implemented Due Date','Mitigation Action(s) Due Date for Completion']
                                                    allidx_df=allidx_df[col_order]
                                                    dict_merged={'Risk Statement': 'Risk Statement (PXL)',
                                                                 'Risk Description':'Risk Description (UCB)',
                                                                 'Mitigation': 'Mitigation (UCB)',
                                                                 'Mitigation Action(s)':'Mitigation Action(s)(PXL)',
                                                                 'Mitigation_Owner': 'Mitigation Owner (UCB)',
                                                                 'Risk Owner': 'Risk Owner (PXL)',
                                                                 'Mitigation Document Plan':'Mitigation Document Plan (UCB)',
                                                                 'Associated Document': 'Associated Document (PXL)',
                                                                 'Mitigation Implemented Due Date': 'Mitigation Implemented Due Date (UCB)',
                                                                 'Mitigation Action(s) Due Date for Completion': 'Mitigation Action(s) Due Date for Completion (PXL)'}
                                                    allidx_df.rename(columns=dict_merged,
                                                                  inplace=True) 

                                                    allidx_df=allidx_df.drop('NA',level='UCB Risk #')
                                                    print('Creating Output Spreadsheets')
                                                    notinpxl=allidx_df.index.symmetric_difference(pxl.index)
                                                    notinpxl_df=ucb[ucb.index.isin(notinpxl)]
                                                    notinpxl_df=notinpxl_df.sort_index().reset_index()
                                                    l_idx=[]
                                                    [l_idx.append(r) for r in range(len(notinpxl_df['Mitigation_Owner']))
                                                    if 'UCB' in notinpxl_df['Mitigation_Owner'].iloc[r]]
                                                    notinpxl_df=notinpxl_df.drop(l_idx)

                                                    notinucb=allidx_df.index.symmetric_difference(ucb.index)
                                                    notinucb_df=pxl[pxl.index.isin(notinucb)].sort_index()
                                                    notinucb_df=notinucb_df.reset_index()

                                                    # Creating sheet with matching index between UCB and PXL, Blu filled cell for UCB Owned risk present in PXL,
                                                    # Highlighted in red differences
                                                    compare=ucb.merge(pxl, left_index=True, right_on=(['UCB Risk #','UCB Mitg #']))
                                                    compare=compare[col_order]
                                                    compare.rename(columns=dict_merged,
                                                                  inplace=True) 
                                                    compare=compare.sort_index().reset_index()

                                                    writer = pd.ExcelWriter(out1, engine='xlsxwriter')

                                                    compare.to_excel(writer, sheet_name='Comparison', index=False)
                                                    notinucb_df.to_excel(writer, sheet_name='PXL Risk not in UCB', index=False)
                                                    notinpxl_df.to_excel(writer, sheet_name='UCB Risk-Mit not in PXL', index=False)
                                                    print('Formatting Spreadsheets')
                                                    # get xlsxwriter objects
                                                    workbook  = writer.book
                                                    ws_comp = writer.sheets['Comparison']
                                                    nucb=writer.sheets['PXL Risk not in UCB']
                                                    npxl=writer.sheets['UCB Risk-Mit not in PXL']
                                                    # define formats
                                                    center_fmt_head = workbook.add_format({'valign':'vcenter','align':'center','text_wrap':True,'bold':True})
                                                    center_fmt = workbook.add_format({'valign':'top','align':'center','text_wrap':True})
                                                    center_fmt_blue= workbook.add_format({'bg_color': '#9de6f2','valign':'top','align':'center','text_wrap':True})
                                                    center_fmt_red= workbook.add_format({'font_color': '#d60b0b','valign':'top','align':'center','text_wrap':True})
                                                    center_fmt_head_lgreen=workbook.add_format({'bg_color': '#8cb87f','valign':'vcenter','align':'center','text_wrap':True,'bold':True})
                                                    center_fmt_head_dgreen=workbook.add_format({'bg_color': '#639654','valign':'vcenter','align':'center','text_wrap':True,'bold':True})
                                                    center_fmt_head_lorange=workbook.add_format({'bg_color': '#edaf32','valign':'vcenter','align':'center','text_wrap':True,'bold':True})
                                                    center_fmt_head_dorange=workbook.add_format({'bg_color': '#db9507','valign':'vcenter','align':'center','text_wrap':True,'bold':True})
                                                    center_fmt_head_blue=workbook.add_format({'bg_color': '#9de6f2','valign':'vcenter','align':'center','text_wrap':True,'bold':True})

                                                    #Set Headers format
                                                    ws_comp.autofilter(0,0,compare.shape[0],compare.shape[1]-1)
                                                    nucb.autofilter(0,0,notinucb_df.shape[0],notinucb_df.shape[1]-1)
                                                    npxl.autofilter(0,0,notinpxl_df.shape[0],notinpxl_df.shape[1]-1)
                                                    ws_comp.freeze_panes(1,2)
                                                    nucb.freeze_panes(1,2)
                                                    npxl.freeze_panes(1,2)
                                                    for col_num, value in enumerate(compare.columns.values):
                                                        if value=='Risk Description (UCB)' or value=='Risk Statement (PXL)':
                                                            ws_comp.write(0, col_num, value, center_fmt_head_lgreen)
                                                        elif value=='Mitigation (UCB)'or value=='Mitigation Action(s)(PXL)':
                                                            ws_comp.write(0, col_num, value, center_fmt_head_dgreen)
                                                        elif value=='Mitigation Document Plan (UCB)'or value=='Associated Document (PXL)':
                                                            ws_comp.write(0, col_num, value, center_fmt_head_lorange)
                                                        elif value=='Mitigation Implemented Due Date (UCB)' or value=='Mitigation Action(s) \nDue Date for Completion (PXL)':
                                                            ws_comp.write(0, col_num, value, center_fmt_head_dorange)
                                                        elif value=='Mitigation Owner (UCB)':
                                                            ws_comp.write(0, col_num, value, center_fmt_head_blue)
                                                        else:
                                                            ws_comp.write(0, col_num, value, center_fmt_head)


                                                    [nucb.write(0, col_num, value, center_fmt_head) for col_num, value in enumerate(notinucb_df.columns.values)]

                                                    [npxl.write(0, col_num, value, center_fmt_head) for col_num, value in enumerate(notinpxl_df.columns.values)]

                                                    # Set cell value format
                                                    for r in range(compare.shape[0]):
                                                        for c in range(compare.shape[1]):
                                                            val=compare.iloc[r,c]
                                                            if 'UCB' in compare['Mitigation Owner (UCB)'].iloc[r]:
                                                                ws_comp.write(r+1,c,val,center_fmt_blue)
                                                            else:
                                                                ws_comp.write(r+1,c,val,center_fmt)

                                                    for r in range(notinucb_df.shape[0]):
                                                        for c in range(notinucb_df.shape[1]):
                                                            val=notinucb_df.iloc[r,c]
                                                            nucb.write(r+1,c,val,center_fmt)
                                                    for r in range(notinpxl_df.shape[0]):
                                                        for c in range(notinpxl_df.shape[1]):
                                                            val=notinpxl_df.iloc[r,c]
                                                            npxl.write(r+1,c,val,center_fmt)

                                                    for r in range(compare.shape[0]):
                                                        val=compare.iloc[r,compare.columns.get_loc('Risk Statement (PXL)')]
                                                        if compare['Risk Description (UCB)'].iloc[r].lower().replace('s/+',"").strip()!=\
                                                        compare['Risk Statement (PXL)'].iloc[r].lower().replace('s/+',"").strip():
                                                            ws_comp.write(r+1,compare.columns.get_loc('Risk Statement (PXL)'),val,center_fmt_red)

                                                    for r in range(compare.shape[0]):
                                                        val=compare.iloc[r,compare.columns.get_loc('Mitigation Action(s)(PXL)')]
                                                        if compare['Mitigation (UCB)'].iloc[r].lower().replace('s/+',"").strip()!=\
                                                        compare['Mitigation Action(s)(PXL)'].iloc[r].lower().replace('s/+',"").strip():
                                                            ws_comp.write(r+1,compare.columns.get_loc('Mitigation Action(s)(PXL)'),val,center_fmt_red)

                                                    for r in range(compare.shape[0]):
                                                        val=compare.iloc[r,compare.columns.get_loc('Associated Document (PXL)')]
                                                        if compare['Mitigation Document Plan (UCB)'].iloc[r].lower().replace('s/+',"").strip()!=\
                                                        compare['Associated Document (PXL)'].iloc[r].lower().replace('s/+',"").strip():
                                                            ws_comp.write(r+1,compare.columns.get_loc('Associated Document (PXL)'),val,center_fmt_red)

                                                    for r in range(compare.shape[0]):
                                                        val=compare.iloc[r,compare.columns.get_loc('Mitigation Action(s) Due Date for Completion (PXL)')]
                                                        if compare['Mitigation Implemented Due Date (UCB)'].iloc[r].lower().replace('s/+',"").strip()!=\
                                                        compare['Mitigation Action(s) Due Date for Completion (PXL)'].iloc[r].lower().replace('s/+',"").strip():
                                                            ws_comp.write(r+1,compare.columns.get_loc('Mitigation Action(s) Due Date for Completion (PXL)'),val,center_fmt_red)

                                                    #Setting sheets row,col dimensions        
                                                    [ws_comp.set_row(r+1,40) for r in range(compare.shape[0])]
                                                    [nucb.set_row(r+1,40) for r in range(notinucb_df.shape[0])]
                                                    [npxl.set_row(r+1,40) for r in range(notinpxl_df.shape[0])]    
                                                    [ws_comp.set_column(0,c+1,10) for c in range(compare.shape[1])]    
                                                    [nucb.set_column(0,c+1,17) for c in range(notinucb_df.shape[1])]    
                                                    [npxl.set_column(0,c+1,17) for c in range(notinpxl_df.shape[1])]

                                                    # save
                                                    writer.save()
                                                    print('###########################################################################')
                                                    print('Comparison Completed')
                                                    print('File saved in: ',out1)
                                    else:
                                              print('Something gone wrong, check the above Error and restart the APP')
   
        if event == 'OLD vs NEW':
            supportedextensions = ['xlsx', 'xlsm']
            layoutprefile = [
                [sg.Text('Select OLD Study Version and NEW Study Version to proceed')],
                [sg.Text('OLD Study Ver'), sg.InputText(), sg.FileBrowse()],
                [sg.Text('NEW Study Ver'), sg.InputText(), sg.FileBrowse()],
                [sg.Text('Saving Location'), sg.InputText(),  sg.FileSaveAs()],
                [sg.Output(size=(61, 5))],
                [sg.Submit('Proceed'), sg.Cancel('Exit')]]
            window = sg.Window('OLD vs NEW', layoutprefile)
            while True:    # The Event Loop
                event, values = window.read()
                if event in (None, 'Exit', 'Cancel',sg.WIN_CLOSED):
                    secondwindow = 0
                    window.close()
                    break
                elif event == 'Proceed':
                    #do some checks if valid directories have been provided
                    file1test = file2test = isitago = proceedwithcomparing= None
                    file1, file2, out1 = values[0], values[1],values[2]
                    if file1 and file2 and out1:
                        file1test = re.findall('.+:\/.+\.+.', file1)
                        file2test = re.findall('.+:\/.+\.+.', file2)
                        out1test= re.findall('.+:\/.+\.+.', out1)
                        isitago = 1
                        if not file1test and file1test is not None:
                            print('Error: BIBO path not valid.')
                            isitago = 0
                        elif not file2test and file2test is not None:
                            print('Error: LEGEND path not valid.')
                            isitago = 0
                        elif not out1test and out1test is not None:
                            print('Error: OUTPUT path not valid')
                            isitago = 0

                        elif re.findall('/.+?/.+\.(.+)',file1)[0] not in supportedextensions or re.findall('/.+?/.+\.(.+)',file2)[0] not in supportedextensions:
                            print('Error: File format currently not supported. At the moment only xlsx and xlsm files are supported.')
                            isitago = 0
                        elif file1 == file2:
                            print('Error: You selected twice OLD or NEW Version. Please select OLD version and NEW version')
                            isitago = 0
                        elif isitago == 1:
                            print('Info: Filepaths correctly defined.')
                            # check if files exist
                            try:
                                print('Info: Attempting to access files.')
                                if re.findall('/.+?/.+\.(.+)',file1)[0] == 'csv':
                                    df1, df2 = pd.read_csv(file1), pd.read_csv(file2)
                                elif re.findall('/.+?/.+\.(.+)',file1)[0] == 'json':
                                    df1, df2 = pd.read_json(file1), pd.read_json(file2)
                                elif re.findall('/.+?/.+\.(.+)',file1)[0] in  ['xlsx', 'xlsm']:
                                    df1, df2 = list(pd.read_excel(file1,None,engine='openpyxl').keys()), list(pd.read_excel(file2,None,engine='openpyxl').keys())

                                else:
                                    print('How did we get here?')
                                proceedwithcomparing = 1
                            except IOError:
                                print("Error: File not accessible.")
                                proceedwithcomparing = 0
                            except UnicodeDecodeError:
                                print("Error: File includes a unicode character that cannot be decoded with the default UTF decryption.")
                                proceedwithcomparing = 0
                            except Exception as e:
                                print('Error: ', e)
                                proceedwithcomparing = 0
                    else:
                        print('Error: Please choose Input Files and Output Saving Location.')
                    if proceedwithcomparing == 1:

                        secondwindow = 1
            #####################################################################################################################
            # First screen completed, moving on to second one

                    if secondwindow == 1:
                        layoutpostfile = [
                            [sg.Text('OLD Version'), sg.InputText(os.path.basename(file1),disabled = True, size = (75,2))],
                            [sg.Text('New Version'), sg.InputText(os.path.basename(file2),disabled = True, size = (75,2))],
                            [sg.Text('Saving Path'), sg.InputText(os.path.basename(out1),disabled = True, size = (75,2))],
                            [sg.Text('Make sure ABOVE parameters are correct')],
                            [sg.Text("PRESS ' COMPARE ' TO RUN THE PROGRAM")],
                            #[sg.Text('Select the data key for the comparison:')],
                            [sg.Output(size=(100, 20))],
                            [sg.Submit('Compare'), sg.Cancel('Exit')]]
                        window2 = sg.Window('OLD vs NEW', layoutpostfile)
                        while True:  # The Event Loop
                            event, values = window2.read()
                            if event in (None, 'Exit', 'Cancel',sg.WIN_CLOSED):
                                window2.close()
                                break
                            elif event == 'Compare':
                                    try:
                                        print('####################################################################################')
                                        print('Comparing OLD Version and NEW Version, please wait...')
                                        # Primary funtion for comparison, applied to every spreadsheet except Study Summary
                                        def excel_diff(old, new, index_col):

                                            df_OLD = pd.read_excel(old, index_col=index_col,na_filter=False,engine='openpyxl')
                                            df_NEW = pd.read_excel(new, index_col=index_col,na_filter=False,engine='openpyxl')

                                            # Perform Diff
                                            global dfDiff
                                            global newRows
                                            dfDiff = df_NEW.copy()
                                            droppedRows = []
                                            newRows = []

                                            cols_OLD = df_OLD.columns
                                            cols_NEW = df_NEW.columns
                                            sharedCols = list(set(cols_OLD).intersection(cols_NEW))
                                            import string
                                            for row in dfDiff.index:
                                                if (row in df_OLD.index) and (row in df_NEW.index):
                                                    for col in sharedCols:
                                                        remove=string.punctuation
                                                        value_OLD = df_OLD.loc[row,col]
                                                        value_NEW = df_NEW.loc[row,col]
                                                        if str(value_OLD).translate(str.maketrans('','',remove))==str(value_NEW).translate(str.maketrans('','',remove)):
                                                            dfDiff.loc[row,col] = df_NEW.loc[row,col]
                                                        else:
                                                            dfDiff.loc[row,col] = ('(->){}').format(value_NEW)
                                                else:
                                                    newRows.append(row)

                                            for row in df_OLD.index:
                                                if row not in df_NEW.index:
                                                    droppedRows.append(row)

                                            dfDiff = dfDiff.fillna('')
                                            #Print in the Tool output box the rows dopped in order to have a reference for the Final User
                                            #print('\n{} ID New Rows:     {}'.format(sheet,newRows))
                                            #print()
                                            print('\n{} ID Dropped Rows: {}'.format(sheet,droppedRows))

                                            # Save output and format
                                            global fname
                                            fname = '{} vs {}'.format(path_OLD,path_NEW)
                                            writer = pd.ExcelWriter(fname, engine='xlsxwriter')
                                            dfDiff.to_excel(writer, sheet_name='DIFF', index=False)
                                            df_NEW.to_excel(writer, sheet_name="NEW_Ver", index=False)
                                            df_OLD.to_excel(writer, sheet_name="OLD_Ver", index=False)

                                            # get xlsxwriter objects
                                            workbook  = writer.book
                                            worksheet = writer.sheets['DIFF']
                                            worksheet.hide_gridlines(2)
                                            worksheet.set_default_row(15)

                                            # define format
                                            highlight_fmt = workbook.add_format({'font_color': '#FF0000'})# difference font color: red
                                            new_fmt = workbook.add_format({'bold':True,'underline': True})# new Line font: bold and underlined, black
                                            # set format over range
                                            ## highlight changed cells
                                            worksheet.conditional_format('A1:ZZ1000', {'type': 'text',
                                                                                    'criteria': 'containing',
                                                                                    'value':'(->)',
                                                                                    'format': highlight_fmt})

                                            # save
                                            writer.save()

                                        #Function for comparing Study Summary spreasheets
                                        def excel_diff_study_summary(old, new, index_col):
                                            df_OLD = pd.read_excel(old, index_col=index_col,na_filter=False,engine='openpyxl')
                                            df_NEW = pd.read_excel(new, index_col=index_col,na_filter=False,engine='openpyxl')
                                            df_OLD.reindex = pd.Series(df_NEW.index)
                                            df_NEW.index = pd.Series(df_NEW.index)

                                            # Perform Diff
                                            global dfDiff
                                            global newRows
                                            dfDiff = df_NEW.copy()
                                            droppedRows = []
                                            newRows = []

                                            cols_OLD = df_OLD.columns
                                            cols_NEW = df_NEW.columns
                                            sharedCols = list(set(cols_OLD).intersection(cols_NEW))

                                            for row in dfDiff.index:
                                                if (row in df_OLD.index) and (row in df_NEW.index):
                                                    for col in sharedCols:
                                                        value_OLD = df_OLD.loc[row,col]
                                                        value_NEW = df_NEW.loc[row,col]
                                                        if value_OLD==value_NEW:
                                                            dfDiff.loc[row,col] = df_NEW.loc[row,col]
                                                        else:
                                                            dfDiff.loc[row,col] = ('(->){}').format(value_NEW)
                                                else:
                                                    newRows.append(row)

                                            for row in df_OLD.index:
                                                if row not in df_NEW.index:
                                                    droppedRows.append(row)

                                            dfDiff = dfDiff.fillna('')

                                            # Print Dropped Rows as a reference for the Final User
                                            #print(dfDiff)
                                            #print('\n{} ID New Rows:     {}'.format(sheet,newRows))
                                            #print()
                                            print('{} ID Dropped Rows: {}'.format(sheet,droppedRows))

                                            # Save output and format
                                            global fname
                                            fname = '{} vs {}'.format(path_OLD,path_NEW)
                                            writer = pd.ExcelWriter(fname, engine='xlsxwriter')
                                            dfDiff.to_excel(writer, sheet_name='DIFF', index=False,header=None)
                                            df_NEW.to_excel(writer, sheet_name="NEW_Ver", index=False,header=None)
                                            df_OLD.to_excel(writer, sheet_name="OLD_Ver", index=False,header=None)

                                            # get xlsxwriter objects
                                            workbook  = writer.book
                                            worksheet = writer.sheets['DIFF']
                                            worksheet.hide_gridlines(2)
                                            worksheet.set_default_row(15)

                                            # define format
                                            highlight_fmt = workbook.add_format({'font_color': '#FF0000'})#'bg_color':'#B1B3B3'

                                            # set format over range
                                            ## highlight changed cells
                                            worksheet.conditional_format('A1:ZZ1000', {'type': 'text',
                                                                                    'criteria': 'containing',
                                                                                    'value':'(->)',
                                                                                    'format': highlight_fmt})

                                            # save
                                            writer.save()


                                        # Correcting eventual mismatch among spreadsheet names in OLD and NEW + removing eventual previous "New/Change" Column
                                        wbsheetsnew = xl.load_workbook(file2)
                                        wbsheetsold = xl.load_workbook(file1)
                                        sheetnew=list(wbsheetsnew.sheetnames)
                                        sheetold=list(wbsheetsold.sheetnames)

                                        #OLD
                                        print('Processing Old Version')
                                        for sheet in sheetold:
                                            for c in range(1,wbsheetsold[sheet].max_column+1):
                                                s = wbsheetsold[sheet].cell(1,c).value
                                                s_st=str(s)
                                                if "New/Change" in s_st: # Removing New/Change column because is just a reference for the final user.
                                                                         # It is applied again at the end of th comparison
                                                    wbsheetsold[sheet].delete_cols(wbsheetsold[sheet].max_column)
                                            # Checking spreadsheet name to manage old BIBO formatting where names were different
                                            if sheet=="Study_Summary":
                                                wbsheetsold[sheet].title="Study Summary"
                                            elif sheet=="Risk":
                                                wbsheetsold[sheet].title="Risk"
                                            elif sheet=="DCCs":
                                                wbsheetsold[sheet].title="DCC"
                                            wbsheetsold.save(file1)

                                        #NEW 
                                        print('Processing New Version')
                                        for sheet in sheetnew:
                                            for c in range(1,wbsheetsnew[sheet].max_column+1):
                                                s = wbsheetsnew[sheet].cell(1,c).value
                                                s_st=str(s)
                                                if "New/Change" in s_st: # Removing New/Change column because is just a reference for the final user.
                                                                         # It is applied again at the end of th comparison
                                                    wbsheetsnew[sheet].delete_cols(wbsheetsnew[sheet].max_column)
                                            # Checking spreadsheet name to manage old BIBO formatting where names were different
                                            if sheet=="Study_Summary":
                                                wbsheetsnew[sheet].title="Study Summary"
                                            elif sheet=="Risk":
                                                wbsheetsnew[sheet].title="Risk"
                                            elif sheet=="DCCs":
                                                wbsheetsnew[sheet].title="DCC"
                                            wbsheetsnew.save(file2)

                                        # Creating list of Common Spreadsheets to loop in
                                        print('Initializing Common Spreadsheets')
                                        wbsheetsnew = xl.load_workbook(file2)
                                        wbsheetsold = xl.load_workbook(file1)    
                                        sheetnew=list(wbsheetsnew.sheetnames)
                                        sheetold=list(wbsheetsold.sheetnames)

                                        commonsheets=list(set(sheetnew).intersection(sheetold))
                                        sheet_list=commonsheets

                                        wbc = xl.load_workbook(file2)
                                        wbc.save(out1)

                                        output=[]

                                        for sheet in sheet_list: 
                                            old = pd.read_excel(file1, sheet, na_values=['NA'],engine='openpyxl')
                                            new = pd.read_excel(file2, sheet, na_values=['NA'],engine='openpyxl')

                                        # Following comparison code for every spreadsheet

                                        ################################################ STUDY SUMMARY ########################################################        
                                            if sheet=="Study Summary":
                                                print( "="*40+" "+"Sheet processed:  "+sheet+" "+"="*40 )
                                                old = pd.read_excel(file1, sheet, na_values=[""],header=None,engine='openpyxl')
                                                new = pd.read_excel(file2, sheet, na_values=[""],header=None,engine='openpyxl') 

                                                old = old[ [0] + [ col for col in old.columns]] #if col != 'Risk ID' 
                                                new = new[ [0] + [ col for col in new.columns]] #if col != 'Risk ID' 
                                                #step 1 Study
                                                #Excel file with a separate tab for changes, additions and removals
                                                output_columns = list((old.loc[:, old.columns != 'version']).columns)
                                                writer1 = pd.ExcelWriter("old_prot.xlsx")
                                                old.to_excel(writer1,"old", index=False, columns=output_columns)
                                                writer2 = pd.ExcelWriter("new_prot.xlsx")
                                                new.to_excel(writer2,"new",index=False, columns=output_columns)
                                                writer1.save()
                                                writer2.save()
                                                path_OLD="old_prot.xlsx"
                                                path_NEW="new_prot.xlsx"

                                                # step 2 Study
                                                #creating raw file with Differences, Added Rows, Removed Rows
                                                excel_diff_study_summary(path_OLD, path_NEW, 0)
                                                output.append(path_OLD)
                                                output.append(path_NEW)  
                                                output.append(fname)

                                                # step 3 Study
                                                # Formatting the raw file as requested
                                                # opening the source excel file 
                                                filename =fname
                                                wb1 = xl.load_workbook(filename) 
                                                ws1 = wb1["DIFF"]
                                                # opening the destination excel file
                                                # Applying desired formatting to the output file
                                                wb2 = xl.load_workbook(out1) 
                                                ws2 = wb2[sheet]
                                                for row in ws1.iter_rows(min_row=2):
                                                    for cell in row:
                                                        new_cell = ws2.cell(row=cell.row, column=cell.col_idx,
                                                                            value= cell.value)                    

                                                new_row_font = Font(name='Arial',size= 9,underline="single", bold=True)
                                                cnr=ws2.max_column+1
                                                ws2.cell(1,cnr).value="New/Change"
                                                for i in range(len(dfDiff.index)):
                                                    if dfDiff.index[i] in newRows:
                                                        ws2.cell(i+2,cnr).value="New_Line"
                                                        for cell in ws2[i+2]:
                                                            cell.font = new_row_font


                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if "(->)" in s_st: 
                                                            ws2.cell(r,c).font = Font(name='Arial',size= 9,color="9C0006")

                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if s_st != None and "(->)" in s_st: 
                                                            ws2.cell(r,c).value = s.replace("(->)","")
                                                            ws2.cell(r,cnr).value="Changed_Line"
                                                            ws2.cell(r,cnr).font=Font(name='Arial',size= 9,color="9C0006")
                                                for r in range(1,ws2.max_row+1):
                                                    c=2
                                                    s = ws2.cell(r,1).value
                                                    s_st=str(s)
                                                    if "%" in s_st:
                                                        ws2.cell(r,c).style = 'Percent'
                                                        ws2.cell(r,c).value = float(ws2.cell(r,c).value)
                                                        ws2.cell(r,c).font=Font(name='Arial',size= 9)
                                                for col_cells in ws2.iter_cols():
                                                    for cell in range(len(col_cells)+1):
                                                        ws2.row_dimensions[cell].height = 20
                                                        ws2.column_dimensions['A'].width = 30
                                                        ws2.column_dimensions['B'].width = 100
                                                        ws2.column_dimensions['C'].width = 24
                                                # center all cells
                                                for col in ws2.columns:
                                                    for cell in col:
                                                # openpyxl styles aren't mutable,
                                                # so you have to create a copy of the style, modify the copy, then set it back
                                                        alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj
                                                
                                                
                                                ws2.auto_filter.ref='A1:S100'
                                                # saving to desired path
                                                wb2.save(out1) 
                                        ############################################################ RISK ######################################################## 
                                            elif sheet=="Risk":
                                                print()
                                                print( "="*40+" "+"Sheet processed:  "+sheet+" "+"="*40 )

                                                # Taking care of differences in column names in each spreadsheet in old and new file
                                                diff=old.columns.difference(new.columns)
                                                for i in range(len(diff)):
                                                    for j in range(len(new.columns)):
                                                        if fuzz.ratio(diff[i],new.columns[j]) >= 88:
                                                            new=new.rename(columns={new.columns[j]:diff[i]})

                                                old = old[ ['Risk ID'] + [ col for col in old.columns]] 
                                                new = new[ ['Risk ID'] + [ col for col in new.columns]] 

                                                #step 1 Risk
                                                #Excel file with a separate tab for changes, additions and removals
                                                output_columns_old = list((old.loc[:, old.columns != 'version']).columns)
                                                output_columns_new = list((new.loc[:, new.columns != 'version']).columns)
                                                writer1 = pd.ExcelWriter("old_risk.xlsx")
                                                old.to_excel(writer1,"old", index=False, columns=output_columns_old)
                                                writer2 = pd.ExcelWriter("new_risk.xlsx")
                                                new.to_excel(writer2,"new",index=False, columns=output_columns_new)
                                                writer1.save()
                                                writer2.save()
                                                path_OLD="old_risk.xlsx"
                                                path_NEW="new_risk.xlsx"

                                                # step 2 Risk
                                                #creating raw file with Differences, Added Rows, Removed Rows
                                                excel_diff(path_OLD, path_NEW, 0)
                                                output.append(path_OLD)
                                                output.append(path_NEW)  
                                                output.append(fname)

                                                # step 3 Risk
                                                # Formatting the raw file as requested     
                                                # opening the source excel file
                                                filename =fname
                                                wb1 = xl.load_workbook(filename) 
                                                ws1 = wb1["DIFF"]
                                                # opening the destination excel file
                                                # Applying desired formatting to the output file
                                                wb2 = xl.load_workbook(out1) 
                                                ws2 = wb2[sheet]
                                                for row in ws1.iter_rows(min_row=2):
                                                    for cell in row:
                                                        new_cell = ws2.cell(row=cell.row, column=cell.col_idx,
                                                                            value= cell.value)                    

                                                new_row_font = Font(name='Arial',size= 9,underline="single", bold=True)
                                                cnr=ws2.max_column+1
                                                ws2.cell(1,cnr).value="New/Change"
                                                for i in range(len(dfDiff.index)):
                                                    if dfDiff.index[i] in newRows:
                                                        ws2.cell(i+2,cnr).value="New_Risk"
                                                        for cell in ws2[i+2]:
                                                            cell.font = new_row_font


                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if "(->)" in s_st: 
                                                            ws2.cell(r,c).font = Font(name='Arial',size= 9,color="9C0006")

                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if s_st != None and "(->)" in s_st: 
                                                            ws2.cell(r,c).value = s.replace("(->)","")
                                                            ws2.cell(r,cnr).value="Changed_Risk"
                                                            ws2.cell(r,cnr).font=Font(name='Arial',size= 9,color="9C0006")
                                                for col_cells in ws2.iter_cols():
                                                    for cell in range(len(col_cells)+1):
                                                        ws2.row_dimensions[cell].height = 100
                                                        ws2.row_dimensions[1].height = 50
                                                        ws2.column_dimensions['A'].width = 12 #Risk Category - 12
                                                        ws2.column_dimensions['B'].width = 12 #Risk Subcategory - 12
                                                        ws2.column_dimensions['C'].width = 5  #Risk ID - 5
                                                        ws2.column_dimensions['D'].width = 75 #Risk Description - 75
                                                        ws2.column_dimensions['E'].width = 10 #Risk Status - 12
                                                        ws2.column_dimensions['F'].width = 14 #IPRS - 14
                                                        ws2.column_dimensions['G'].width = 12 #IDQ - 12
                                                        ws2.column_dimensions['H'].width = 10 #Likelihood - 10
                                                        ws2.column_dimensions['I'].width = 10 #Detection  - 10
                                                        ws2.column_dimensions['J'].width = 12 #RPN - 8
                                                        ws2.column_dimensions['K'].width = 10 #Associated Mit
                                                        ws2.column_dimensions['L'].width = 10 #Mit by CRO- 10
                                                        ws2.column_dimensions['M'].width = 50 #Risk Comments - 10
                                                        ws2.column_dimensions['N'].width = 24 #? - 10
                                                # center all cells
                                                for col in ws2.columns:
                                                    for cell in col:
                                                        alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj
                                                # saving to desired path
                                                ws2.auto_filter.ref='A1:S100'
                                                ws2.column_dimensions['N'].width= 24
                                                ws2.freeze_panes='E2'
                                                wb2.save(out1) 

                                        ############################################################ MITIGATIONS #################################################     

                                            if sheet=="Mitigations":
                                                print()
                                                print( "="*40+" "+"Sheet processed:  "+sheet+" "+"="*40 )

                                                # Taking care of differences in column names in each spreadsheet in old and new file
                                                diff=old.columns.difference(new.columns)
                                                for i in range(len(diff)):
                                                    for j in range(len(new.columns)):
                                                        if fuzz.ratio(diff[i],new.columns[j]) >= 88:
                                                            new=new.rename(columns={new.columns[j]:diff[i]})

                                                old = old[ ['Mitigation ID'] + [ col for col in old.columns ] ]
                                                new = new[ ['Mitigation ID'] + [ col for col in new.columns ] ]

                                                #step 1 MIT
                                                #Excel file with a separate tab for changes, old version and new version
                                                output_columns_old = list((old.loc[:, old.columns != 'version']).columns)
                                                output_columns_new = list((new.loc[:, new.columns != 'version']).columns)
                                                writer1 = pd.ExcelWriter("old_mit.xlsx")
                                                old.to_excel(writer1,"old", index=False, columns=output_columns_old)
                                                writer2 = pd.ExcelWriter("new_mit.xlsx")
                                                new.to_excel(writer2,"new",index=False, columns=output_columns_new)
                                                writer1.save()
                                                writer2.save()
                                                path_OLD="old_mit.xlsx"
                                                path_NEW="new_mit.xlsx"

                                                # step 2 MIT
                                                #creating raw file with Differences, Added Rows, Removed Rows
                                                excel_diff(path_OLD, path_NEW, 0)
                                                output.append(path_OLD)
                                                output.append(path_NEW)  
                                                output.append(fname)

                                                # step 3 MIT
                                                # Formatting the raw file as requested 
                                                # opening the source excel file
                                                filename =fname
                                                wb1 = xl.load_workbook(filename) 
                                                ws1 = wb1["DIFF"]

                                                # opening the destination excel file      
                                                wb2 = xl.load_workbook(out1) 
                                                ws2 = wb2[sheet]
                                                for row in ws1.iter_rows(min_row=2):
                                                    for cell in row:
                                                        new_cell = ws2.cell(row=cell.row, column=cell.col_idx,
                                                                            value= cell.value)                    

                                                new_row_font = Font(name='Arial',size= 9,underline="single", bold=True)
                                                cnr=ws2.max_column+1
                                                ws2.cell(1,cnr).value="New/Change"
                                                for i in range(len(dfDiff.index)):
                                                    if dfDiff.index[i] in newRows:
                                                        ws2.cell(i+2,cnr).value="New_Mitigation"
                                                        for cell in ws2[i+2]:
                                                            cell.font = new_row_font


                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if "(->)" in s_st: 
                                                            ws2.cell(r,c).font = Font(name='Arial',size= 9,color="9C0006")

                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if s_st != None and "(->)" in s_st: 
                                                            ws2.cell(r,c).value = s.replace("(->)","")
                                                            ws2.cell(r,cnr).value="Changed_Mitigation"
                                                            ws2.cell(r,cnr).font=Font(name='Arial',size= 9,color="9C0006")

                                                for col_cells in ws2.iter_cols():
                                                    for cell in range(len(col_cells)+1):
                                                        ws2.row_dimensions[cell].height = 100
                                                        ws2.row_dimensions[1].height = 35
                                                        ws2.column_dimensions['A'].width = 12 #Risk Category - 12
                                                        ws2.column_dimensions['B'].width = 12 #Risk Subcategory - 12
                                                        ws2.column_dimensions['C'].width = 5  #Risk ID - 5
                                                        ws2.column_dimensions['D'].width = 45 #Risk Description - 45
                                                        ws2.column_dimensions['E'].width = 8  #Risk Status - 8
                                                        ws2.column_dimensions['F'].width = 5  #RPN - 5
                                                        ws2.column_dimensions['G'].width = 6  #Mitigation ID - 6
                                                        ws2.column_dimensions['H'].width = 50 #Mitigation - 50
                                                        ws2.column_dimensions['I'].width = 9  #Mitigation Status - 9
                                                        ws2.column_dimensions['J'].width = 14 #Mitigation Owner -14
                                                        ws2.column_dimensions['K'].width = 14 #Implemented Due Date -14
                                                        ws2.column_dimensions['L'].width = 24 #Document Plan - 30
                                                        ws2.column_dimensions['M'].width = 24 #Mitigation Comments – 24

                                                for col in ws2.columns:
                                                    for cell in col:
                                                        alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj
     
                                                for col in ws2.iter_cols(min_col=4, max_col=4):
                                                    for cell in col:    
                                                        alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj 
    
                                                for col in ws2.iter_cols(min_col=8, max_col=8):
                                                    for cell in col:    
                                                        alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj 
                                                for col in ws2.iter_cols(min_col=13, max_col=13):
                                                    for cell in col:    
                                                        alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj 
                                                # step 4 MIT
                                                # saving to desired path
                                                ws2.auto_filter.ref='A1:S100'
                                                ws2.column_dimensions['N'].width= 24
                                                ws2.freeze_panes='E2'
                                                wb2.save(out1)

                                        ############################################################ DCC ###########################################################     

                                            elif sheet=="DCC":
                                                print()
                                                print( "="*40+" "+"Sheet processed:  "+sheet+" "+"="*40 )

                                                # Taking care of differences in column names in each spreadsheet in old and new file
                                                diff=old.columns.difference(new.columns)
                                                for i in range(len(diff)):
                                                    for j in range(len(new.columns)):
                                                        if fuzz.ratio(diff[i],new.columns[j]) >=88:
                                                            new=new.rename(columns={new.columns[j]:diff[i]})

                                                old["DCC ID_ind"]=old["DCC ID"]
                                                new["DCC ID_ind"]=new["DCC ID"]

                                                old=old[["DCC ID_ind"]+[col for col in old.columns if col!= "DCC ID_ind"]]
                                                new=new[["DCC ID_ind"]+[col for col in new.columns if col!= "DCC ID_ind"]]

                                                if "Critical Reason" in old.columns:
                                                    old["DCC ID_ind"]=old["DCC ID"].astype(str)+"__"+old["Critical Reason"].astype(str)
                                                    new["DCC ID_ind"]=new["DCC ID"].astype(str)+"__"+new["Critical Reason"].astype(str)
                                                else:
                                                    old["DCC ID_ind"]=old["DCC ID"].astype(str)+"__"+old["Critical Reasons"].astype(str)
                                                    new["DCC ID_ind"]=new["DCC ID"].astype(str)+"__"+new["Critical Reasons"].astype(str)

                                                #step 1
                                                #Excel file with a separate tab for changes, additions and removals
                                                output_columns_old = list((old.loc[:, old.columns != 'version']).columns)
                                                writer1 = pd.ExcelWriter("old_DCC.xlsx")
                                                old.to_excel(writer1,"old", index=False, columns=output_columns_old)
                                                output_columns_new= list((new.loc[:, new.columns != 'version']).columns)
                                                writer2 = pd.ExcelWriter("new_DCC.xlsx")
                                                new.to_excel(writer2,"new",index=False, columns=output_columns_new)
                                                writer1.save()
                                                writer2.save()

                                                path_OLD="old_DCC.xlsx"
                                                path_NEW="new_DCC.xlsx"

                                                # step 2  DCC
                                                #creating raw file with Differences, Added Rows, Removed Rows
                                                excel_diff(path_OLD, path_NEW, 0)
                                                output.append(path_OLD)
                                                output.append(path_NEW)  
                                                output.append(fname)

                                                # step 3  DCC
                                                # Formatting the raw file as requested
                                                # opening the source excel file
                                                filename =fname
                                                wb1 = xl.load_workbook(filename) 
                                                ws1 = wb1["DIFF"]

                                                # opening the destination excel file  
                                                wb2 = xl.load_workbook(out1) 
                                                ws2 = wb2[sheet]
                                                for row in ws1.iter_rows(min_row=2):
                                                    for cell in row:
                                                        new_cell = ws2.cell(row=cell.row, column=cell.col_idx,
                                                                            value= cell.value)                    

                                                new_row_font = Font(name='Arial',size= 9,underline="single", bold=True)
                                                cnr=ws2.max_column+1
                                                ws2.cell(1,cnr).value="New/Change"
                                                for i in range(len(dfDiff.index)):
                                                    if dfDiff.index[i] in newRows:
                                                        ws2.cell(i+2,cnr).value="New_DCC"
                                                        for cell in ws2[i+2]:
                                                            cell.font = new_row_font


                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if "(->)" in s_st: 
                                                            ws2.cell(r,c).font = Font(name='Arial',size= 9,color="9C0006")

                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if s_st != None and "(->)" in s_st: 
                                                            ws2.cell(r,c).value = s.replace("(->)","")
                                                            ws2.cell(r,cnr).value="Changed_DCC"
                                                            ws2.cell(r,cnr).font=Font(name='Arial',size= 9,color="9C0006")
                                                for col_cells in ws2.iter_cols():
                                                    for cell in range(len(col_cells)+1):
                                                        ws2.row_dimensions[cell].height = 30
                                                        ws2.row_dimensions[1].height = 35
                                                        ws2.column_dimensions['A'].width = 10 #Data Source - 10
                                                        ws2.column_dimensions['B'].width = 6  #DCC - 6
                                                        ws2.column_dimensions['C'].width = 40 #Data Description - 40
                                                        ws2.column_dimensions['D'].width = 8  #Critical - 8
                                                        ws2.column_dimensions['E'].width = 32 #Critical Reasons -32
                                                        ws2.column_dimensions['F'].width = 8  # of visits - 8
                                                        ws2.column_dimensions['G'].width = 12 # associated comments - 12
                                                        ws2.column_dimensions['H'].width = 50 #DCC comments - 50

                                                for col in ws2.columns:
                                                    for cell in col:
                                                        alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj
                                                for col in ws2.iter_cols(min_col=8, max_col=8):
                                                    for cell in col:    
                                                        alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj 
                                                # step 4   DCC
                                                # saving to desired path
                                                ws2.auto_filter.ref='A1:S100'
                                                ws2.column_dimensions['I'].width= 24
                                                ws2.freeze_panes='E2'
                                                wb2.save(out1)
                                        ########################################################### COMMENTS ####################################################     

                                            elif sheet=="Comments":
                                                print()
                                                print( "="*40+" "+"Sheet processed:  "+sheet+" "+"="*40 )

                                                # Taking care of differences in column names in each spreadsheet in old and new file
                                                diff=old.columns.difference(new.columns)
                                                for i in range(len(diff)):
                                                    for j in range(len(new.columns)):
                                                        if fuzz.ratio(diff[i],new.columns[j]) >=88:
                                                            new=new.rename(columns={new.columns[j]:diff[i]})

                                                old = old[ ['Comment Created Date'] + [ col for col in old.columns ] ]
                                                new = new[ ['Comment Created Date'] + [ col for col in new.columns ] ]

                                                #step 1 Comm
                                                #Excel file with a separate tab for changes, additions and removals
                                                output_columns_old = list((old.loc[:, old.columns != 'version']).columns)
                                                writer1 = pd.ExcelWriter("old_Comm.xlsx")
                                                old.to_excel(writer1,"old", index=False, columns=output_columns_old)
                                                output_columns_new= list((new.loc[:, new.columns != 'version']).columns)
                                                writer2 = pd.ExcelWriter("new_Comm.xlsx")
                                                new.to_excel(writer2,"new",index=False, columns=output_columns_new)
                                                writer1.save()
                                                writer2.save()

                                                path_OLD="old_Comm.xlsx"
                                                path_NEW="new_Comm.xlsx"

                                                # step 2  Comm
                                                #creating raw file with Differences, Added Rows, Removed Rows
                                                excel_diff(path_OLD, path_NEW, 0)
                                                output.append(path_OLD)
                                                output.append(path_NEW)  
                                                output.append(fname)

                                                # step 3  Comm
                                                # Formatting the raw file as requested
                                                # opening the source excel file
                                                filename =fname
                                                wb1 = xl.load_workbook(filename) 
                                                ws1 = wb1["DIFF"]

                                                # opening the destination excel file    
                                                wb2 = xl.load_workbook(out1) 
                                                ws2 = wb2[sheet]
                                                for row in ws1.iter_rows(min_row=2):
                                                    for cell in row:
                                                        new_cell = ws2.cell(row=cell.row, column=cell.col_idx,
                                                                            value= cell.value)                    

                                                new_row_font = Font(name='Arial',size= 9,underline="single", bold=True)
                                                cnr=ws2.max_column+1
                                                ws2.cell(1,cnr).value="New/Change"
                                                for i in range(len(dfDiff.index)):
                                                    if dfDiff.index[i] in newRows:
                                                        ws2.cell(i+2,cnr).value="New_Comment"
                                                        for cell in ws2[i+2]:
                                                            cell.font = new_row_font


                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if "(->)" in s_st: 
                                                            ws2.cell(r,c).font = Font(name='Arial',size= 9,color="9C0006")

                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if s_st != None and "(->)" in s_st: 
                                                            ws2.cell(r,c).value = s.replace("(->)","")
                                                            ws2.cell(r,cnr).value="Changed_Comment"
                                                            ws2.cell(r,cnr).font=Font(name='Arial',size= 9,color="9C0006")
                                                for col_cells in ws2.iter_cols():
                                                    for cell in range(len(col_cells)+1):
                                                        ws2.row_dimensions[cell].height = 100
                                                        ws2.row_dimensions[1].height = 30
                                                        ws2.column_dimensions['A'].width = 10
                                                        ws2.column_dimensions['B'].width = 10
                                                        ws2.column_dimensions['C'].width = 100
                                                        ws2.column_dimensions['D'].width = 10
                                                        ws2.column_dimensions['E'].width = 20
                                                        ws2.column_dimensions['F'].width = 10
                                                        ws2.column_dimensions['G'].width = 25
                                                for col in ws2.columns:
                                                    for cell in col:
                                                        alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj
                                                for col in ws2.iter_cols(min_col=3, max_col=3):
                                                    for cell in col:   
                                                        alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj 
                                                # step 4   Comm
                                                # saving to desired path
                                                ws2.auto_filter.ref='A1:S100'
                                                ws2.column_dimensions['H'].width= 24
                                                ws2.freeze_panes='D2'
                                                wb2.save(out1)
                                        ########################################################### PROCESSES ###################################################     

                                            elif sheet=="Processes":
                                                print()
                                                print( "="*40+" "+"Sheet processed:  "+sheet+" "+"="*40 )  

                                                # Taking care of differences in column names in each spreadsheet in old and new file
                                                diff=old.columns.difference(new.columns)
                                                for i in range(len(diff)):
                                                    for j in range(len(new.columns)):
                                                        if fuzz.ratio(diff[i],new.columns[j]) >=88:
                                                            new=new.rename(columns={new.columns[j]:diff[i]})

                                                old["Process ID_ind"]=old["Process ID"]
                                                new["Process ID_ind"]=new["Process ID"]

                                                old=old[["Process ID_ind"]+[col for col in old.columns if col!= "Process ID_ind"]]
                                                new=new[["Process ID_ind"]+[col for col in new.columns if col!= "Process ID_ind"]]

                                                if "Critical Reason" in old.columns:
                                                    old["Process ID_ind"]=old["Process ID"].astype(str)+"__"+old["Critical Reason"].astype(str)
                                                    new["Process ID_ind"]=new["Process ID"].astype(str)+"__"+new["Critical Reason"].astype(str)
                                                else:
                                                    old["Process ID_ind"]=old["Process ID"].astype(str)+"__"+old["Critical Reasons"].astype(str)
                                                    new["Process ID_ind"]=new["Process ID"].astype(str)+"__"+new["Critical Reasons"].astype(str)


                                                #step 1  PROC
                                                #Excel file with a separate tab for changes, old version and new version
                                                output_columns_old = list((old.loc[:, old.columns != 'version']).columns)
                                                writer1 = pd.ExcelWriter("old_pcs.xlsx")
                                                output_columns_new = list((new.loc[:, new.columns != 'version']).columns)
                                                old.to_excel(writer1,"old", index=False, columns=output_columns_old)
                                                writer2 = pd.ExcelWriter("new_pcs.xlsx")
                                                new.to_excel(writer2,"new",index=False, columns=output_columns_new)
                                                writer1.save()
                                                writer2.save()
                                                path_OLD="old_pcs.xlsx"
                                                path_NEW="new_pcs.xlsx"

                                                # step 2 PROC
                                                #creating raw file with Differences, Added Rows, Removed Rows
                                                excel_diff(path_OLD, path_NEW, 0)
                                                output.append(path_OLD)
                                                output.append(path_NEW)  
                                                output.append(fname)

                                                # step 3 PROC 
                                                # Formatting the raw file as requested
                                                # opening the source excel file    PROC
                                                filename =fname
                                                wb1 = xl.load_workbook(filename) 
                                                ws1 = wb1["DIFF"]

                                                # opening the destination excel file      PROC  
                                                wb2 = xl.load_workbook(out1) 
                                                ws2 = wb2[sheet]
                                                for row in ws1.iter_rows(min_row=2):
                                                    for cell in row:
                                                        new_cell = ws2.cell(row=cell.row, column=cell.col_idx,
                                                                            value= cell.value)                    

                                                new_row_font = Font(name='Arial',size= 9,underline="single", bold=True)
                                                cnr=ws2.max_column+1
                                                ws2.cell(1,cnr).value="New/Change"
                                                for i in range(len(dfDiff.index)):
                                                    if dfDiff.index[i] in newRows:
                                                        ws2.cell(i+2,cnr).value="New_Process"
                                                        for cell in ws2[i+2]:
                                                            cell.font = new_row_font


                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if "(->)" in s_st: 
                                                            ws2.cell(r,c).font = Font(name='Arial',size= 9,color="9C0006")

                                                for r in range(1,ws2.max_row+1):
                                                    for c in range(1,ws2.max_column+1):
                                                        s = ws2.cell(r,c).value
                                                        s_st=str(s)
                                                        if s_st != None and "(->)" in s_st: 
                                                            ws2.cell(r,c).value = s.replace("(->)","")
                                                            ws2.cell(r,cnr).value="Changed_Process"
                                                            ws2.cell(r,cnr).font=Font(name='Arial',size= 9,color="9C0006")
                                                
                                                for col_cells in ws2.iter_cols():
                                                    for cell in range(len(col_cells)+1):
                                                        ws2.row_dimensions[cell].height = 30
                                                        ws2.row_dimensions[1].height = 35
                                                        ws2.column_dimensions['A'].width = 8  #Process ID - 8
                                                        ws2.column_dimensions['B'].width = 32 #Process - 32
                                                        ws2.column_dimensions['C'].width = 8  #Critical - 8
                                                        ws2.column_dimensions['D'].width = 60 #Critical Reason - 60
                                                        ws2.column_dimensions['E'].width = 8  # study visits - 8
                                                        ws2.column_dimensions['F'].width = 10 # comments - 10
                                                        ws2.column_dimensions['G'].width = 80 #Process Comments - 80
                                                for col in ws2.columns:
                                                    for cell in col:
                                                        alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                        cell.alignment = alignment_obj

                                                # step 4  PROC
                                                # saving to desired path
                                                ws2.auto_filter.ref='A1:S100'
                                                ws2.column_dimensions['H'].width= 24
                                                ws2.freeze_panes='E2'
                                                wb2.save(out1)

                                        ###################################### Removing created xlsx file for the processing #####################################
                                        print('Removing Dummy Files')
                                        file_to_remove=output
                                        for f in file_to_remove:
                                             os.remove(f)
                                        print()
                                        print('#######################################################################')
                                        print('Comparison Completed')
                                        print()
                                        print("Desired output saved as: "+ out1)



                                    except Exception as e:
                                        trace_back = sys.exc_info()[2]
                                        line = trace_back.tb_lineno
                                        print("Comparison Exception in line {}: ".format(line), e)
 
        if event == 'BIBO Fmtg':
            supportedextensions = ['xlsx', 'xlsm']
            layoutprefile = [
                [sg.Text('Select BIBO file and LEGEND to proceed')],
                [sg.Text('File BIBO'), sg.InputText(), sg.FileBrowse()],
                [sg.Text('File LEGEND'), sg.InputText(), sg.FileBrowse()],
                [sg.Text('Saving Location'), sg.InputText(),
                 sg.FileSaveAs()],
                # *list1,
                [sg.Output(size=(61, 5))],
                [sg.Submit('Proceed'), sg.Cancel('Exit')]
            ]
            window = sg.Window('BIBO Fmtg', layoutprefile)
            while True:    # The Event Loop
                event, values = window.read()
                if event in (None, 'Exit', 'Cancel',sg.WIN_CLOSED):
                    secondwindow = 0
                    window.close()
                    break
                elif event == 'Proceed':
                    #do some checks if valid directories have been provided
                    file1test = file2test = isitago = proceedwithformatting= None
                    file1, file2, out1 = values[0], values[1],values[2]
                    if file1 and file2 and out1:
                        file1test = re.findall('.+:\/.+\.+.', file1)
                        file2test = re.findall('.+:\/.+\.+.', file2)
                        out1test= re.findall('.+:\/.+\.+.', out1)
                        isitago = 1
                        if not file1test and file1test is not None:
                            print('Error: BIBO path not valid.')
                            isitago = 0
                        elif not file2test and file2test is not None:
                            print('Error: LEGEND path not valid.')
                            isitago = 0
                        elif not out1test and out1test is not None:
                            print('Error: OUTPUT path not valid')
                            isitago = 0

                        elif re.findall('/.+?/.+\.(.+)',file1)[0] not in supportedextensions or re.findall('/.+?/.+\.(.+)',file2)[0] not in supportedextensions:
                            print('Error: File format currently not supported. At the moment only xlsx and xlsm files are supported.')
                            isitago = 0
                        elif file1 == file2:
                            print('Error: You selected twice BIBO or LEGEND file')
                            isitago = 0
                        elif isitago == 1:
                            print('Info: Filepaths correctly defined.')
                            # check if files exist
                            try:
                                print('Info: Attempting to access files.')
                                if re.findall('/.+?/.+\.(.+)',file1)[0] == 'csv':
                                    df1, df2 = pd.read_csv(file1), pd.read_csv(file2)
                                elif re.findall('/.+?/.+\.(.+)',file1)[0] == 'json':
                                    df1, df2 = pd.read_json(file1), pd.read_json(file2)
                                elif re.findall('/.+?/.+\.(.+)',file1)[0] in  ['xlsx', 'xlsm']:
                                    df1, df2 = list(pd.read_excel(file1,None,engine='openpyxl').keys()), list(pd.read_excel(file2,None,engine='openpyxl').keys())

                                else:
                                    print('How did we get here?')
                                proceedwithformatting = 1
                            except IOError:
                                print("Error: File not accessible.")
                                proceedwithformatting = 0
                            except UnicodeDecodeError:
                                print("Error: File includes a unicode character that cannot be decoded with the default UTF decryption.")
                                proceedwithformatting = 0
                            except Exception as e:
                                print('Error: ', e)
                                proceedwithformatting = 0
                    else:
                        print('Error: Please choose Input Files and Output Saving Location.')
                    if proceedwithformatting == 1:
                        secondwindow = 1
            #####################################################################################################################
            # First screen completed, moving on to second one
                    if secondwindow == 1:
                        layoutpostfile = [
                            [sg.Text('File BIBO'), sg.InputText(os.path.basename(file1),disabled = True, size = (75,2))],
                            [sg.Text('File LEGEND'), sg.InputText(os.path.basename(file2),disabled = True, size = (75,2))],
                            [sg.Text('Saving Path'), sg.InputText(os.path.basename(out1),disabled = True, size = (75,2))],
                            [sg.Text('Make sure ABOVE parameters are correct')],
                            [sg.Text("PRESS ' FORMAT ' TO RUN THE PROGRAM")],
                            [sg.Output(size=(100, 20))],
                            [sg.Submit('Format'), sg.Cancel('Exit')]]
                        window2 = sg.Window('BIBO Fmtg', layoutpostfile)
                        allok=0
                        while True:  # The Event Loop
                            event, values = window2.read()
                            allok=1
                            if event in (None, 'Exit', 'Cancel',sg.WIN_CLOSED):
                                window2.close()
                                break
                            elif event == 'Format':
                                if allok==1:
                                    try:
                                        print('####################################################################################')
                                        print('Formatting BIBO file, please wait...')
                                        print('##################  Processing Risk #################')
                                        def highlight_Risk(s):
                                            if s.Mitigated_by_CRO == 'YES'and (s.Risk_Status == 'Active'
                                                                               or s.Risk_Status == 'Re-Assessment Open'
                                                                               or s.Risk_Status == 'Submitted'):
                                                return ['background-color : #c6e0b4']*len(dfRisk.columns) #LightGreen 

                                            elif s.Mitigated_by_CRO == 'NO'and (s.Risk_Status == 'Active'
                                                                               or s.Risk_Status == 'Re-Assessment Open'
                                                                               or s.Risk_Status == 'Submitted'):
                                                return ['background-color: #bdd7ee']*len(dfRisk.columns) # LightBlue
                                            else:
                                                return ['background-color: #d9d9d9']*len(dfRisk.columns) # Gainsboro Gray

                                        # Read file location
                                        dfRisk = pd.read_excel(file1 , sheet_name = 'Risk',na_filter=False,engine='openpyxl')
                                        dfRisk = dfRisk.replace('N/A','Not Applicable')
                                        m=pd.read_excel(file1, sheet_name='Mitigations',engine='openpyxl')
                                        # Correct YES/NO statement in 'Mitigation by CRO' column
                                        Risk_CRO=[]
                                        MbC=[]
                                        [Risk_CRO.append(m['Risk ID'][i]) for i in range(len(m)) if 'CRO' in str(m['Mitigation Owner'][i])]
                                        Risk_CRO=list(np.unique(np.array(Risk_CRO)))
                                        for i in range(len(dfRisk)):
                                            if dfRisk['Risk ID'][i] in Risk_CRO:
                                                MbC.append('YES')
                                            else:
                                                MbC.append('NO')
                                        dfRisk['Mitigated by CRO']=MbC
                                        # Select Columns
                                        dfRisk = dfRisk[['Risk Category', 'Risk Subcategory', 'Risk ID', 'Risk Description',
                                               'Risk Status', 'Risk Impact - Patient Rights & Safety',
                                               'Risk Impact - Data Quality', 'Likelihood', 'Detection Capability',
                                               'Risk Priority Number (RPN)','# Associated Mitigations','Mitigated by CRO','Risk Comments']]

                                        # Rename Columns to use later in the highlight Risk function
                                        dfRisk = dfRisk.rename(columns={"Mitigated by CRO": "Mitigated_by_CRO", "Risk Status":"Risk_Status"})
                                        # Apply highlight_Risk function 
                                        dfRisk = dfRisk.style.apply(highlight_Risk, axis=1)
                                        # save Styler file

                                        dfRisk.to_excel('dfRisk_Styler.xlsx', sheet_name='Risk',index=False)

                                        # To open the workbook # workbook object is created 
                                        wb = xl.load_workbook('dfRisk_Styler.xlsx') 
                                        # Get workbook active sheet # from the active attribute.  
                                        sheet = wb.active

                                        #Iteration over all rows:
                                        for col_cells in sheet.iter_cols():#min_col=2, max_col=2
                                            #Iteration over all Columnss:
                                            for cell in range(len(col_cells)+1):
                                                # set the height of the rowS 
                                                sheet.row_dimensions[cell].height = 100
                                                sheet.row_dimensions[1].height = 50
                                                # set the width of the columns 
                                                sheet.column_dimensions['A'].width = 12 #Risk Category - 12
                                                sheet.column_dimensions['B'].width = 12 #Risk Subcategory - 12
                                                sheet.column_dimensions['C'].width = 5  #Risk ID - 5
                                                sheet.column_dimensions['D'].width = 75 #Risk Description - 75
                                                sheet.column_dimensions['E'].width = 10 #Risk Status - 12
                                                sheet.column_dimensions['F'].width = 14 #IPRS - 14
                                                sheet.column_dimensions['G'].width = 12 #IDQ - 12
                                                sheet.column_dimensions['H'].width = 10 #Likelihood - 10
                                                sheet.column_dimensions['I'].width = 10 #Detection  - 10
                                                sheet.column_dimensions['J'].width = 12 #RPN - 8
                                                sheet.column_dimensions['K'].width = 10 #Associated Mitigation
                                                sheet.column_dimensions['L'].width = 10 #Mitigated by CRO - 10
                                                sheet.column_dimensions['M'].width = 50 #Risk Comments - 10

                                        # center all cells
                                        for col in sheet.columns:
                                            for cell in col:
                                                # openpyxl styles aren't mutable,
                                                # so you have to create a copy of the style, modify the copy, then set it back
                                                alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj

                                        # Align Risk Description all cells to the Left        
                                        for col in sheet.iter_cols(min_col=4, max_col=4):
                                            for cell in col:    
                                                alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj 

                                        # save the file 
                                        wb.save('1_dfRisk_.xlsx') 


                                        _border = Border(left=Side(style='thin',color='dde6d6'), 
                                                             right=Side(style='thin',color='dde6d6'), 
                                                             top=Side(style='thin',color='dde6d6'), 
                                                             bottom=Side(style='thin',color='dde6d6'))

                                        _font = Font(name='Arial',size=9)

                                        header_font = Font(name='Arial',size=9,bold=True, color='f8fbfd')

                                        header_Fill = PatternFill(start_color='0b64a0',
                                                                  end_color='0b64a0',
                                                                  fill_type='solid')

                                        dfRisk_wb = load_workbook('1_dfRisk_.xlsx')
                                        ws = dfRisk_wb['Risk']

                                        # Enumerate the cells
                                        # property cell.border should be used instead of cell.style.border
                                        for row in ws.iter_rows():
                                            for cell in row:
                                                cell.font = _font
                                                cell.border = _border
                                        #Iteration over all columns of one row, for instance row==1 the Header
                                        for row_cells in ws.iter_rows(min_row=0, max_row=1):
                                            for cell in row_cells:
                                                cell.fill = header_Fill
                                                cell.font = header_font
                                        dfRisk_wb.save('1_dfRisk_.xlsx')

                                        #Save Workbook
                                        current_directory = os.getcwd()
                                        folder = os.path.join(current_directory, r'spreadsheets')
                                        if not os.path.exists(folder):
                                            os.makedirs(folder)    
                                        dfRisk_wb.save(folder +'/1_dfRisk_.xlsx')
                                        os.remove("dfRisk_Styler.xlsx")
                                        os.remove("1_dfRisk_.xlsx")

                                        ## Mitigations sheet
                                        print('##################  Processing Mitigations #################')

                                        def highlight_Mitigations(s):
                                            
                                            if (s.Mitigation_Status == 'Ongoing'
                                                or s.Mitigation_Status == 'New'
                                                or s.Mitigation_Status == 'Planned') and 'CRO' in s.Mitigation_Owner:
                                                return ['background-color : #c6e0b4']*len(dfMitigation.columns) #LightGreen
                                            elif (s.Mitigation_Status == 'Ongoing'
                                                or s.Mitigation_Status == 'New'
                                                or s.Mitigation_Status == 'Planned') and 'UCB' in s.Mitigation_Owner:
                                                return ['background-color: #bdd7ee']*len(dfMitigation.columns) # LightBlue
                                            else:
                                                return ['background-color: #d9d9d9']*len(dfMitigation.columns) # Gainsboro Gray
                                        #Read file location
                                        dfMitigation = pd.read_excel(file1, sheet_name = 'Mitigations',na_filter=False,engine='openpyxl')
                                        dfMitigation = dfMitigation.replace('N/A','Not Applicable')
                                        # Filling empty cells with "Not Applicable" value
                                        #dfMitigation[['Mitigation Document Plan']] = dfMitigation[['Mitigation Document Plan']].fillna('Not Applicable')

                                        # Drop unnecessary Columns
                                        dfMitigation = dfMitigation.drop(['Mitigation Spotcheck', 'Mitigation Control Measure'], axis=1)

                                        # Rename Columns to use later in the highlight Risk function
                                        dfMitigation = dfMitigation.rename(columns={"Mitigation Owner": "Mitigation_Owner", "Mitigation Status":"Mitigation_Status"})    
                                        # Apply highlight_Mitigations function 
                                        dfMitigation = dfMitigation.style.apply(highlight_Mitigations, axis=1)
                                        # Save Styler
                                        dfMitigation.to_excel('dfMitigation_Styler.xlsx',index=False)


                                        # To open the workbook # workbook object is created 
                                        dfMitigation_wb = xl.load_workbook('dfMitigation_Styler.xlsx') 
                                        # Get workbook active sheet # from the active attribute.  
                                        sheet = dfMitigation_wb.active

                                        #Iteration over all rows:
                                        for col_cells in sheet.iter_cols():#min_col=2, max_col=2
                                            #Iteration over all Columnss:
                                            for cell in range(len(col_cells)+1):
                                                # set the height of the rowS 
                                                sheet.row_dimensions[cell].height = 100
                                                sheet.row_dimensions[1].height = 35
                                                # set the width of the columns 
                                                sheet.column_dimensions['A'].width = 12 #Risk Category - 12
                                                sheet.column_dimensions['B'].width = 12 #Risk Subcategory - 12
                                                sheet.column_dimensions['C'].width = 5  #Risk ID - 5
                                                sheet.column_dimensions['D'].width = 45 #Risk Description - 45
                                                sheet.column_dimensions['E'].width = 8  #Risk Status - 8
                                                sheet.column_dimensions['F'].width = 5  #RPN - 5
                                                sheet.column_dimensions['G'].width = 6  #Mitigation ID - 6
                                                sheet.column_dimensions['H'].width = 50 #Mitigation - 50
                                                sheet.column_dimensions['I'].width = 9  #Mitigation Status - 9
                                                sheet.column_dimensions['J'].width = 14 #Mitigation Owner -14
                                                sheet.column_dimensions['K'].width = 14 #Implemented Due Date -14
                                                sheet.column_dimensions['L'].width = 24 #Document Plan - 30
                                                sheet.column_dimensions['M'].width = 24 #Mitigation Comments – 24

                                        # center all cells
                                        for col in sheet.columns:
                                            for cell in col:
                                                # openpyxl styles aren't mutable,
                                                # so you have to create a copy of the style, modify the copy, then set it back
                                                alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj

                                        # Align Risk Description all cells to the Left        
                                        for col in sheet.iter_cols(min_col=4, max_col=4):
                                            for cell in col:    
                                                alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj 

                                        # Align Mitigation all cells to the Left        
                                        for col in sheet.iter_cols(min_col=8, max_col=8):
                                            for cell in col:    
                                                alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj 

                                        # save the file 
                                        dfMitigation_wb.save('2_dfMitigation_.xlsx') 


                                        _border = Border(left=Side(style='thin',color='dde6d6'), 
                                                             right=Side(style='thin',color='dde6d6'), 
                                                             top=Side(style='thin',color='dde6d6'), 
                                                             bottom=Side(style='thin',color='dde6d6'))

                                        _font = Font(name='Arial',size=9)

                                        header_font = Font(name='Arial',size=9,bold=True, color='f8fbfd')

                                        header_Fill = PatternFill(start_color='0b64a0',
                                                                   end_color='0b64a0',
                                                                   fill_type='solid')

                                        dfMitigation_wb = load_workbook('2_dfMitigation_.xlsx')
                                        ws = dfMitigation_wb['Sheet1']
                                        # Enumerate the cells
                                        # property cell.border should be used instead of cell.style.border
                                        for row in ws.iter_rows():
                                            for cell in row:
                                                cell.font = _font
                                                cell.border = _border
                                        #Iteration over all columns of one row, for instance row==1 the Header
                                        for row_cells in ws.iter_rows(min_row=0, max_row=1):
                                            for cell in row_cells:
                                                cell.fill = header_Fill
                                                cell.font = header_font 

                                        ws.title = "Mitigations"
                                        #Save Workbook
                                        dfMitigation_wb.save(folder+'/2_dfMitigation_.xlsx')
                                        os.remove("dfMitigation_Styler.xlsx")
                                        os.remove("2_dfMitigation_.xlsx")

                                        # DCCs Sheet
                                        print('##################  Processing DCCs #################')

                                        def highlight_DCC(s):
                                            if s['Critical'] == 'YES':
                                                return ['background-color : #c6e0b4']*len(dfDcc.columns) #LightGreen
                                            else:
                                                return ['background-color : white']*len(dfDcc.columns)
                
                                        dfDcc = pd.read_excel(file1, sheet_name = 'DCC',na_filter=False,engine='openpyxl')
                                        dfDcc = dfDcc.replace('N/A','Not Applicable')
                                        dfDcc = dfDcc.drop(['Reason Other', 'Composite Scoring','# of Risks',
                                                           'Risk IDs','# of Study Objectives','# of IE Criteria',
                                                           '# of Withdrawal Criteria'], axis=1)
                                        dfDcc = dfDcc.style.apply(highlight_DCC, axis=1)
                                        dfDcc.to_excel('dfDcc.xlsx',index=False)


                                        # To open the workbook # workbook object is created 
                                        dfDcc_wb = xl.load_workbook('dfDcc.xlsx') 
                                        # Get workbook active sheet # from the active attribute.  
                                        sheet = dfDcc_wb.active

                                        #Iteration over all rows:
                                        for col_cells in sheet.iter_cols():#min_col=2, max_col=2
                                            #Iteration over all Columnss:
                                            for cell in range(len(col_cells)+1):
                                                # set the height of the rowS 
                                                sheet.row_dimensions[cell].height = 35
                                                sheet.row_dimensions[1].height = 30
                                                # set the width of the columns 
                                                sheet.column_dimensions['A'].width = 10 #Data Source - 10
                                                sheet.column_dimensions['B'].width = 6  #DCC - 6
                                                sheet.column_dimensions['C'].width = 40 #Data Description - 40
                                                sheet.column_dimensions['D'].width = 8  #Critical - 8
                                                sheet.column_dimensions['E'].width = 32 #Critical Reasons -32
                                                sheet.column_dimensions['F'].width = 8  # of visits - 8
                                                sheet.column_dimensions['G'].width = 12 # associated comments - 12
                                                sheet.column_dimensions['H'].width = 50 #DCC comments - 50

                                        # center all cells
                                        for col in sheet.columns:
                                            for cell in col:
                                                # openpyxl styles aren't mutable,
                                                # so you have to create a copy of the style, modify the copy, then set it back
                                                alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj

                                        # save the file 
                                        dfDcc_wb.save('3_dfDcc_.xlsx') 


                                        _border = Border(left=Side(style='thin',color='dde6d6'), 
                                                             right=Side(style='thin',color='dde6d6'), 
                                                             top=Side(style='thin',color='dde6d6'), 
                                                             bottom=Side(style='thin',color='dde6d6'))

                                        _font = Font(name='Arial',size=9)

                                        header_font = Font(name='Arial',size=9,bold=True, color='f8fbfd')
                                        
                                        header_Fill = PatternFill(start_color='0b64a0',
                                                                   end_color='0b64a0',
                                                                   fill_type='solid')

                                        dfDcc_wb = load_workbook('3_dfDcc_.xlsx')
                                        ws = dfDcc_wb['Sheet1']
                                        # Enumerate the cells
                                        # property cell.border should be used instead of cell.style.border
                                        for row in ws.iter_rows():
                                            for cell in row:
                                                cell.font = _font
                                                cell.border = _border
                                        #Iteration over all columns of one row, for instance row==1 the Header
                                        for row_cells in ws.iter_rows(min_row=0, max_row=1):
                                            for cell in row_cells:
                                                cell.fill = header_Fill
                                                cell.font = header_font
                                        
                                        ws.title = "DCCs"
                                        #Save Workbook
                                        dfDcc_wb.save(folder+'/3_dfDcc_.xlsx')
                                        os.remove("dfDcc.xlsx")
                                        os.remove("3_dfDcc_.xlsx")

                                        # Processes Sheet
                                        print('##################  Processing Processes #################')

                                        dfProcesses = pd.read_excel(file1, sheet_name = 'Processes',na_filter=False,engine='openpyxl')
                                        dfProcesses = dfProcesses.replace('N/A','Not Applicable')
                                        dfProcesses = dfProcesses.drop(['# of Risks', 'Risk IDs', '# of Study Objectives',
                                               '# of Inclusion/Exclusion', '# of Withdrawal Criteria'], axis=1)

                                        dfProcesses.to_excel('dfProcesses.xlsx',index=False)


                                        # To open the workbook # workbook object is created 
                                        dfProcesses_wb = xl.load_workbook('dfProcesses.xlsx') 
                                        # Get workbook active sheet # from the active attribute.  
                                        sheet = dfProcesses_wb.active

                                        #Iteration over all rows:
                                        for col_cells in sheet.iter_cols():#min_col=2, max_col=2
                                            #Iteration over all Columnss:
                                            for cell in range(len(col_cells)+1):
                                                # set the height of the rowS 
                                                sheet.row_dimensions[cell].height = 35
                                                sheet.row_dimensions[1].height = 30
                                                # set the width of the columns 
                                                sheet.column_dimensions['A'].width = 8  #Process ID - 8
                                                sheet.column_dimensions['B'].width = 32 #Process - 32
                                                sheet.column_dimensions['C'].width = 8  #Critical - 8
                                                sheet.column_dimensions['D'].width = 60 #Critical Reason - 60
                                                sheet.column_dimensions['E'].width = 8  # study visits - 8
                                                sheet.column_dimensions['F'].width = 10 # comments - 10
                                                sheet.column_dimensions['G'].width = 80 #Process Comments - 80

                                        # center all cells
                                        for col in sheet.columns:
                                            for cell in col:
                                                # openpyxl styles aren't mutable,
                                                # so you have to create a copy of the style, modify the copy, then set it back
                                                alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj

                                        # save the file 
                                        dfProcesses_wb.save('4_dfProcesses_.xlsx') 


                                        _border = Border(left=Side(style='thin',color='dde6d6'), 
                                                             right=Side(style='thin',color='dde6d6'), 
                                                             top=Side(style='thin',color='dde6d6'), 
                                                             bottom=Side(style='thin',color='dde6d6'))

                                        _font = Font(name='Arial',size=9)

                                        header_font = Font(name='Arial',size=9,bold=True, color='f8fbfd')

                                        header_Fill = PatternFill(start_color='0b64a0',
                                                                   end_color='0b64a0',
                                                                   fill_type='solid')

                                        dfProcesses_wb = load_workbook('4_dfProcesses_.xlsx')
                                        ws = dfProcesses_wb['Sheet1']
                                        # Enumerate the cells
                                        # property cell.border should be used instead of cell.style.border
                                        for row in ws.iter_rows():
                                            for cell in row:
                                                cell.font = _font
                                                cell.border = _border
                                        #Iteration over all columns of one row, for instance row==1 the Header
                                        for row_cells in ws.iter_rows(min_row=0, max_row=1):
                                            for cell in row_cells:
                                                cell.fill = header_Fill
                                                cell.font = header_font 

                                        ws.title = "Processes"
                                        #Save Workbook
                                        dfProcesses_wb.save(folder+'/4_dfProcesses_.xlsx')
                                        os.remove("dfProcesses.xlsx")
                                        os.remove("4_dfProcesses_.xlsx")

                                        # Comments Sheet
                                        print('##################  Processing Comments #################')

                                        dfComments = pd.read_excel(file1, sheet_name = 'Comments',na_filter=False,engine='openpyxl')
                                        dfComments = dfComments.replace('N/A','Not Applicable')
                                        #dfComments = dfComments.drop(['Comment Area', 'Comment Parent ID', 'Comment Value', 'Comment Type',
                                               #'Comment Status', 'Comment Created By', 'Comment Created Date'], axis=1)
                                        dfComments.to_excel('dfComments.xlsx',index=False)


                                        # To open the workbook # workbook object is created 
                                        dfComments_wb = xl.load_workbook('dfComments.xlsx') 
                                        # Get workbook active sheet # from the active attribute.  
                                        sheet = dfComments_wb.active

                                        #Iteration over all rows:
                                        for col_cells in sheet.iter_cols():#min_col=2, max_col=2
                                            #Iteration over all Columnss:
                                            for cell in range(len(col_cells)+1):
                                                # set the height of the rowS 
                                                sheet.row_dimensions[cell].height = 100
                                                sheet.row_dimensions[1].height = 30
                                                # set the width of the columns 
                                                sheet.column_dimensions['A'].width = 10
                                                sheet.column_dimensions['B'].width = 10
                                                sheet.column_dimensions['C'].width = 100
                                                sheet.column_dimensions['D'].width = 10
                                                sheet.column_dimensions['E'].width = 20
                                                sheet.column_dimensions['F'].width = 10
                                                sheet.column_dimensions['G'].width = 25

                                        # center all cells
                                        for col in sheet.columns:
                                            for cell in col:
                                                # openpyxl styles aren't mutable,
                                                # so you have to create a copy of the style, modify the copy, then set it back
                                                alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj

                                        # Align Comment Value all cells to the Left        
                                        for col in sheet.iter_cols(min_col=3, max_col=3):
                                            for cell in col:    
                                                alignment_obj = cell.alignment.copy(horizontal='left', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj 

                                        # save the file 
                                        dfComments_wb.save('5_dfComments_.xlsx') 

                                        _border = Border(left=Side(style='thin',color='dde6d6'), 
                                                             right=Side(style='thin',color='dde6d6'), 
                                                             top=Side(style='thin',color='dde6d6'), 
                                                             bottom=Side(style='thin',color='dde6d6'))

                                        _font = Font(name='Arial',size=9)

                                        header_font = Font(name='Arial',size=9,bold=True, color='f8fbfd')

                                        header_Fill = PatternFill(start_color='0b64a0',
                                                                   end_color='0b64a0',
                                                                   fill_type='solid')

                                        dfComments_wb = load_workbook('5_dfComments_.xlsx')
                                        ws = dfComments_wb['Sheet1']
                                        # Enumerate the cells
                                        # property cell.border should be used instead of cell.style.border
                                        for row in ws.iter_rows():
                                            for cell in row:
                                                cell.font = _font
                                                cell.border = _border
                                        #Iteration over all columns of one row, for instance row==1 the Header
                                        for row_cells in ws.iter_rows(min_row=0, max_row=1):
                                            for cell in row_cells:
                                                cell.fill = header_Fill
                                                cell.font = header_font

                                        ws.title = "Comments"
                                        #Save Workbook
                                        dfComments_wb.save(folder+'/5_dfComments_.xlsx')
                                        os.remove("dfComments.xlsx")
                                        os.remove("5_dfComments_.xlsx")

                                        # Study Summary
                                        print('##################  Processing Study Summary #################')

                                        dfStudy_Summary = pd.read_excel(file1, sheet_name = 'Study Summary',na_filter=False,engine='openpyxl')
                                        dfStudy_Summary = dfStudy_Summary.replace('N/A','Not Applicable')
                                        dfStudy_Summary = dfStudy_Summary[dfStudy_Summary['Last Refresh Date'] != '% RPN Score']
                                        dfStudy_Summary = dfStudy_Summary[dfStudy_Summary['Last Refresh Date'] != 'Overall Protocol Risk Score']
                                        dfStudy_Summary.to_excel('dfStudy_Summary.xlsx',index=False)


                                        # To open the workbook # workbook object is created 
                                        dfStudy_Summary_wb = xl.load_workbook('dfStudy_Summary.xlsx') 
                                        # Get workbook active sheet # from the active attribute.  
                                        sheet = dfStudy_Summary_wb.active

                                        #Iteration over all rows:
                                        for col_cells in sheet.iter_cols():#min_col=2, max_col=2
                                            #Iteration over all Columnss:
                                            for cell in range(len(col_cells)+1):
                                                # set the height of the rowS 
                                                sheet.row_dimensions[cell].height = 20
                                                #sheet.row_dimensions[1].height = 30
                                                # set the width of the columns 
                                                sheet.column_dimensions['A'].width = 30
                                                sheet.column_dimensions['B'].width = 100

                                        # center all cells
                                        for col in sheet.columns:
                                            for cell in col:
                                                # openpyxl styles aren't mutable,
                                                # so you have to create a copy of the style, modify the copy, then set it back
                                                alignment_obj = cell.alignment.copy(horizontal='center', vertical='center',wrap_text=True)
                                                cell.alignment = alignment_obj

                                        # save the file 
                                        dfStudy_Summary_wb.save('0_dfStudy_Summary_.xlsx') 


                                        _border = Border(left=Side(style='thin',color='dde6d6'), 
                                                             right=Side(style='thin',color='dde6d6'), 
                                                             top=Side(style='thin',color='dde6d6'), 
                                                             bottom=Side(style='thin',color='dde6d6'))

                                        _font = Font(name='Arial',size=9)

                                        header_font = Font(name='Arial',size=9,bold=True, color='f8fbfd')

                                        header_Fill = PatternFill(start_color='0b64a0',
                                                                   end_color='0b64a0',
                                                                   fill_type='solid')

                                        dfStudy_Summary_wb = load_workbook('0_dfStudy_Summary_.xlsx')
                                        ws = dfStudy_Summary_wb['Sheet1']
                                        # Enumerate the cells
                                        # property cell.border should be used instead of cell.style.border
                                        for row in ws.iter_rows():
                                            for cell in row:
                                                cell.font = _font
                                                cell.border = _border
                                        for row_cells in ws.iter_rows(min_col=0,max_col=1):
                                            for cell in row_cells:
                                                cell.fill = header_Fill
                                                cell.font = header_font
                                        for r in range(1,ws.max_row+1):
                                            c=2
                                            s = ws.cell(r,1).value
                                            s_st=str(s)
                                            if "%" in s_st:
                                                #print(ws.cell(r,c).value)
                                                ws.cell(r,c).style = 'Percent'
                                                ws.cell(r,c).value=float(ws.cell(r,c).value)
                                                ws.cell(r,c).alignment = Alignment(horizontal='center', vertical='center')

                                        ws.title = "Study_Summary"
                                        #Save Workbook
                                        dfStudy_Summary_wb.save(folder+'/0_dfStudy_Summary_.xlsx')
                                        os.remove("dfStudy_Summary.xlsx")
                                        os.remove("0_dfStudy_Summary_.xlsx")

                                        # Legend
                                        print('##################  Adding Legend #################')

                                        legend_wb = load_workbook(file2)
                                        ws = legend_wb['legend']

                                        ws.title = "legend"
                                        #Save Workbook
                                        legend_wb.save(folder+'/6_legend.xlsx')

                                        # Master file creation
                                        print('##################  Merging Spreadsheets #################')

                                        path = folder
                                        try:
                                            print('INITIALIZE EXCEL COM APP')
                                            xlapp = win32.gencache.EnsureDispatch('Excel.Application')

                                            print('ASSIGN CONSTANTS')
                                            xlPasteValues = -4163; lPasteFormats = -4122; xlWorkbookDefault = 51

                                            print('CREATE NEW WOKRBOOK')
                                            if os.path.exists(os.getcwd()+'\\pre_final.xlsx'):
                                                os.remove(os.getcwd()+'\\pre_final.xlsx') 

                                            save_loc=os.getcwd()+'\\pre_final.xlsx'
                                            new_wb = xlapp.Workbooks.Add()
                                            new_wb.SaveAs(save_loc, FileFormat=xlWorkbookDefault)
                                           # new_wb_Save(save_loc)

                                            print('LOOPING THROUGH WORKBOOKS')
                                            xl_files = [f for f in os.listdir(path) if f.endswith('.xls') or f.endswith('.xlsx')]

                                            for wb in xl_files:
                                                xlwb = xlapp.Workbooks.Open(os.path.join(path, wb))

                                                print('LOOPING THROUGH EVERY WORKSHEET, COPYING TO NEW WORKSHEET')
                                                for xlsh in xlwb.Worksheets:
                                                    new_sh = new_wb.Worksheets.Add()
                                                    new_sh.Name = xlsh.Name
                                                    new_wb.Save()            
                                                    new_sh.Move(After=new_wb.Worksheets(new_wb.Worksheets.Count))

                                                    xlsh.Cells.Copy(new_sh.Cells)
                                                    new_sh = None

                                                xlwb.Close()
                                                xlwb = None

                                            # REMOVNIG DEFAULT SHEET
                                            new_wb.Sheets[1].Delete()
                                            new_wb.Save()
                                            new_wb.Close()
                                            #xlapp.Visible = True

                                        except Exception as e:
                                            trace_back = sys.exc_info()[2]
                                            line = trace_back.tb_lineno
                                            print("Error Merging Spreadsheets in line {}: ".format(line), e)

                                        finally:
                                            # RELEASE RESOURCES
                                            xlsh = None; new_sh = None; 
                                            xlwb = None; new_wb = None; xlapp = None

                                        print('######################################################')
                                        print('Adding filters')

                                        wb= xl.load_workbook(save_loc)
                                        wsRisk = wb['Risk']
                                        wsMitigations = wb['Mitigations']
                                        wsDCCs = wb['DCCs']
                                        wsProcesses = wb['Processes']
                                        wsComments = wb['Comments']

                                        wsRisk.auto_filter.ref = wsRisk.dimensions
                                        wsMitigations.auto_filter.ref = wsMitigations.dimensions
                                        wsDCCs.auto_filter.ref = wsDCCs.dimensions
                                        wsProcesses.auto_filter.ref = wsProcesses.dimensions
                                        wsComments.auto_filter.ref = wsComments.dimensions
                                        print('######################################################')
                                        print('Freezing Panes')

                                        wsRisk = wb['Risk']AC
                                        wsRisk.freeze_panes='E2'
                                        wsMitigations = wb['Mitigations']
                                        wsMitigations.freeze_panes='E2'
                                        wsDCCs = wb['DCCs']
                                        wsDCCs.freeze_panes='E2'
                                        wsProcesses = wb['Processes']
                                        wsProcesses.freeze_panes='E2'
                                        wsComments = wb['Comments']
                                        wsComments.freeze_panes='D2'

                                    #     save_loc_f=os.path.join(os.environ['ONEDRIVE'],'Documents','standard format_f.xlsx')
                                        wb.save(save_loc)
                                        wb.close()

                                        # Optional

                                        print('Adding Colors')
                                        book = xl.load_workbook(save_loc)

                                        sheet = book["Study_Summary"] #book.sheetnames("Study_Summary")
                                        sheet.sheet_properties.tabColor = "999999"

                                        sheet = book["Risk"]
                                        sheet.sheet_properties.tabColor = "6aa84f"

                                        sheet = book["Mitigations"]
                                        sheet.sheet_properties.tabColor = "45818e"

                                        sheet = book["DCCs"]
                                        sheet.sheet_properties.tabColor = "f9cb9c"

                                        sheet = book["Processes"]
                                        sheet.sheet_properties.tabColor = "e69138"

                                        sheet = book["Comments"]
                                        sheet.sheet_properties.tabColor = "999999"

                                        sheet = book["legend"]
                                        sheet.sheet_properties.tabColor = "1e90ff"

                                    #     save_loc_final=os.path.join(os.environ['ONEDRIVE'],'Desktop','standard format.xlsx')

                                        book.save(out1)
                                        book.close()
                                        shutil.rmtree(folder)
                                        os.remove(save_loc)
                                    #     os.remove(save_loc_f)
                                        print("##################################################")
                                        print('Formatting Completed')
                                        print('Output saved in: ',out1)
                                    except Exception as e:
                                        trace_back = sys.exc_info()[2]
                                        line = trace_back.tb_lineno
                                        print("Process Exception in line {}: ".format(line), e)
                                        allok=0

                            else:
                                print('Something gone wrong, Follow the instruction above')
    except Exception as e:
        trace_back = sys.exc_info()[2]
        line = trace_back.tb_lineno
        print("Process Exception in line {}: ".format(line), e)
